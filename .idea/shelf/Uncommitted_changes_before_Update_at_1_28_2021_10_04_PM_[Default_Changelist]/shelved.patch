Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * This file was generated by the Gradle 'init' task.\r\n */\r\n\r\nplugins {\r\n    id 'com.github.johnrengelman.shadow' version '6.1.0'\r\n    id 'java'\r\n    id 'maven-publish'\r\n}\r\nshadowJar {\r\n    classifier ''\r\n    relocate 'com.vdurmont', \"tech.bedev.discordsrvutils.dependecies.emoji-java\"\r\n    relocate 'org.bstats', \"tech.bedev.discordsrvutils.dependecies.bstats\"\r\n    relocate 'space.arim.dazzleconf', \"tech.bedev.discordsrvutils.dependecies.dazzleconf\"\r\n    relocate 'com.zaxxer', \"tech.bedev.discordsrvutils.dependecies.hikariCP\"\r\n    relocate 'org.hsqldb', \"tech.bedev.discordsrvutils.dependecies.hsqldb\"\r\n    relocate 'org.mariadb.jdbc', \"tech.bedev.discordsrvutils.dependecies.mariadb\"\r\n    relocate 'org.yaml', \"tech.bedev.discordsrvutils.dependecies.yaml\"\r\n}\r\nbuild.finalizedBy shadowJar\r\n\r\nrepositories {\r\n    mavenLocal()\r\n    jcenter()\r\n    maven {\r\n        url = uri('https://nexus.vankka.dev/repository/maven-public/')\r\n    }\r\n    maven {\r\n        url = uri('http://repo.extendedclip.com/content/repositories/placeholderapi/')\r\n    }\r\n\r\n    maven {\r\n        url = uri('https://oss.sonatype.org/content/repositories/snapshots/')\r\n    }\r\n\r\n    maven {\r\n        url = uri('https://jitpack.io')\r\n    }\r\n\r\n    maven {\r\n        url = uri('https://repo.codemc.org/repository/maven-public')\r\n    }\r\n\r\n    maven {\r\n        url = uri('https://ci.ender.zone/plugin/repository/everything/')\r\n    }\r\n\r\n    maven {\r\n        url = uri('https://papermc.io/repo/repository/maven-public/')\r\n    }\r\n\r\n    maven {\r\n        url = uri('https://nexus.scarsz.me/content/groups/public/')\r\n    }\r\n\r\n    maven {\r\n        url = uri('https://hub.spigotmc.org/nexus/content/repositories/snapshots/')\r\n    }\r\n\r\n    maven {\r\n        url = uri('https://repo.maven.apache.org/maven2/')\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation 'com.vdurmont:emoji-java:5.1.1'\r\n    implementation 'org.yaml:snakeyaml:1.27'\r\n    implementation 'space.arim.dazzleconf:dazzleconf-ext-snakeyaml:1.2.0-SNAPSHOT'\r\n    implementation 'com.zaxxer:HikariCP:3.4.5'\r\n    implementation 'org.hsqldb:hsqldb:2.3.2'\r\n    implementation 'org.bstats:bstats-bukkit:1.7'\r\n    implementation 'org.mariadb.jdbc:mariadb-java-client:2.7.0'\r\n    compileOnly 'net.ess3:EssentialsX:2.17.2'\r\n    compileOnly 'org.spigotmc:spigot-api:1.16.3-R0.1-SNAPSHOT'\r\n    compileOnly 'com.github.DevLeoko:AdvancedBan:b4bbb6a'\r\n    compileOnly 'com.discordsrv:discordsrv:1.21.0'\r\n    compileOnly 'me.clip:placeholderapi:2.9.2'\r\n}\r\n\r\ngroup = 'me.bluetree.discordsrvutils'\r\nversion = '1.1.9'\r\ndescription = 'DiscordSRVUtils'\r\ncompileJava.options.encoding 'UTF-8'\r\njava.sourceCompatibility = JavaVersion.VERSION_1_8\r\n\r\npublishing {\r\n    publications {\r\n        maven(MavenPublication) {\r\n            from(components.java)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision 52e72c775d8a697877a85792d687acbb295159cc)
+++ build.gradle	(date 1610901333481)
@@ -78,7 +78,7 @@
 }
 
 group = 'me.bluetree.discordsrvutils'
-version = '1.1.9'
+version = '1.1.12'
 description = 'DiscordSRVUtils'
 compileJava.options.encoding 'UTF-8'
 java.sourceCompatibility = JavaVersion.VERSION_1_8
Index: src/main/resources/plugin.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>name: DiscordSRVUtils\r\nsoftdepend:\r\n  - DiscordSRV\r\n  - Essentials\r\n  - Advancedban\r\nversion: 1.1.9\r\nmain: tech.bedev.discordsrvutils.DiscordSRVUtils\r\nauthor: Blue_Tree\r\napi-version: 1.13\r\n\r\ncommands:\r\n  discordsrvutils:\r\n    aliases: [ dsrvu, dsu, du, discordu, srvu ]\r\n  setlevel:\r\n    aliases: [ sl, setl ]\r\n    permission: discordsrvutils.setlevel\r\n  addlevels:\r\n    aliases: [ al, addl ]\r\n    permission: discordsrvutils.addlevels\r\n\r\n  removelevels:\r\n    aliases: [ rl, removelevels ]\r\n    permission: discordsrvutils.removelevels\r\n  setxp:\r\n    aliases: [ sxp, setl ]\r\n    permission: discordsrvutils.setxp\r\n  addxp:\r\n    aliases: [ axp, addxp ]\r\n    permission: discordsrvutils.addxp\r\n  removexp:\r\n    aliases: [ rxp, removexp ]\r\n    permission: discordsrvutils.removexp\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/plugin.yml	(revision 52e72c775d8a697877a85792d687acbb295159cc)
+++ src/main/resources/plugin.yml	(date 1610901586198)
@@ -3,7 +3,7 @@
   - DiscordSRV
   - Essentials
   - Advancedban
-version: 1.1.9
+version: 1.1.12
 main: tech.bedev.discordsrvutils.DiscordSRVUtils
 author: Blue_Tree
 api-version: 1.13
Index: src/main/java/tech/bedev/discordsrvutils/DiscordSRVUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tech.bedev.discordsrvutils;\r\n\r\nimport com.zaxxer.hikari.HikariConfig;\r\nimport com.zaxxer.hikari.HikariDataSource;\r\nimport github.scarsz.discordsrv.DiscordSRV;\r\nimport github.scarsz.discordsrv.dependencies.jda.api.JDA;\r\nimport github.scarsz.discordsrv.dependencies.jda.api.OnlineStatus;\r\nimport github.scarsz.discordsrv.dependencies.jda.api.requests.GatewayIntent;\r\nimport github.scarsz.discordsrv.objects.Lag;\r\nimport net.md_5.bungee.api.ChatColor;\r\nimport org.bstats.bukkit.Metrics;\r\nimport org.bukkit.Bukkit;\r\nimport org.bukkit.plugin.java.JavaPlugin;\r\nimport space.arim.dazzleconf.error.InvalidConfigException;\r\nimport tech.bedev.discordsrvutils.Configs.*;\r\nimport tech.bedev.discordsrvutils.Person.Person;\r\nimport tech.bedev.discordsrvutils.Person.PersonImpl;\r\nimport tech.bedev.discordsrvutils.commands.*;\r\nimport tech.bedev.discordsrvutils.commands.tabCompleters.DiscordSRVUtilsTabCompleter;\r\nimport tech.bedev.discordsrvutils.events.*;\r\nimport tech.bedev.discordsrvutils.leaderboard.LeaderBoardManager;\r\nimport tech.bedev.discordsrvutils.leaderboard.LeaderBoardManagerImpl;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.file.Path;\r\nimport java.sql.*;\r\nimport java.util.*;\r\n\r\npublic class DiscordSRVUtils extends JavaPlugin {\r\n    public static boolean isReady = false;\r\n    public static boolean PAPI;\r\n    public static Timer timer = new Timer();\r\n    public static SQLConfig SQLconfig;\r\n    public static LevelingConfig Levelingconfig;\r\n    public static BotSettingsConfig BotSettingsconfig;\r\n    public static ModerationConfig Moderationconfig;\r\n    public static BansIntegrationConfig BansIntegrationconfig;\r\n    public static MainConfConfig Config;\r\n    public static Timer timer2 = new Timer();\r\n    public static SuggestionsConfig SuggestionsConfig;\r\n    public Map<UUID, Long> lastchattime = new HashMap<>();\r\n    public DiscordSRVEventListener discordListener;\r\n    public JDAEvents JDALISTENER;\r\n    public HikariDataSource sql;\r\n    public String username;\r\n    public String password;\r\n    public int port;\r\n    public String host;\r\n    public boolean SQLEnabled;\r\n    public ConfManager<SQLConfig> SQLConfigManager = ConfManager.create(getDataFolder().toPath(), \"SQL.yml\", SQLConfig.class);\r\n    public ConfManager<LevelingConfig> LevelingConfigManager = ConfManager.create(getDataFolder().toPath(), \"Leveling.yml\", LevelingConfig.class);\r\n    public ConfManager<BotSettingsConfig> BotSettingsConfigManager = ConfManager.create(getDataFolder().toPath(), \"BotSettings.yml\", BotSettingsConfig.class);\r\n    public ConfManager<ModerationConfig> ModerationConfigManager = ConfManager.create(getDataFolder().toPath(), \"Moderation.yml\", ModerationConfig.class);\r\n    public ConfManager<BansIntegrationConfig> BansIntegrationConfigManager = ConfManager.create(getDataFolder().toPath(), \"BansIntegration.yml\", BansIntegrationConfig.class);\r\n    public ConfManager<MainConfConfig> MainConfManager = ConfManager.create(getDataFolder().toPath(), \"config.yml\", MainConfConfig.class);\r\n    public Map<Long, Long> tempmute = new HashMap<>();\r\n    public ConfManager<SuggestionsConfig> SuggestionsConfManager = ConfManager.create(getDataFolder().toPath(), \"suggestions.yml\", SuggestionsConfig.class);\r\n    Path databaseFile;\r\n    String jdbcUrl;\r\n\r\n    public static JDA getJda() {\r\n        return DiscordSRV.getPlugin().getJda();\r\n    }\r\n\r\n    public static DiscordSRVUtils getMainClass() {\r\n        return new DiscordSRVUtils();\r\n    }\r\n\r\n    public static Connection getDatabase() throws SQLException {\r\n        return new DiscordSRVUtils().getDatabaseFile();\r\n    }\r\n\r\n    public Long parseStringToMillies(String s) {\r\n        String slc = s.toLowerCase();\r\n        if (slc.endsWith(\"s\")) {\r\n            String v = slc.replace(\"s\", \"\");\r\n            try {\r\n                Integer.parseInt(v);\r\n                String v2 = v + \"000\";\r\n\r\n                return Long.parseLong(v2);\r\n            } catch (NumberFormatException ex) {\r\n                return Long.parseLong(\"-1\");\r\n            }\r\n        } else if (slc.endsWith(\"m\")) {\r\n            String v = slc.replace(\"m\", \"\");\r\n            try {\r\n                Integer.parseInt(v);\r\n                return Integer.parseInt(v) * 60000L;\r\n            } catch (NumberFormatException ex) {\r\n                return Long.parseLong(\"-1\");\r\n            }\r\n\r\n        } else if (slc.endsWith(\"h\")) {\r\n            String v = slc.replace(\"h\", \"\");\r\n            try {\r\n                Integer.parseInt(v);\r\n                return Integer.parseInt(v) * 3600000L;\r\n            } catch (NumberFormatException ex) {\r\n                return Long.parseLong(\"-1\");\r\n            }\r\n\r\n        } else if (slc.endsWith(\"d\")) {\r\n            String v = slc.replace(\"d\", \"\");\r\n            try {\r\n                Integer.parseInt(v);\r\n                return Integer.parseInt(v) * 86400000L;\r\n            } catch (NumberFormatException ex) {\r\n                return Long.parseLong(\"-1\");\r\n            }\r\n\r\n        }\r\n        return Long.parseLong(\"-1\");\r\n    }\r\n\r\n    @Override\r\n    public void onEnable() {\r\n        try {\r\n            SQLConfigManager.reloadConfig();\r\n            LevelingConfigManager.reloadConfig();\r\n            Levelingconfig = LevelingConfigManager.reloadConfigData();\r\n            SQLconfig = SQLConfigManager.reloadConfigData();\r\n            BotSettingsConfigManager.reloadConfig();\r\n            BotSettingsconfig = BotSettingsConfigManager.reloadConfigData();\r\n            ModerationConfigManager.reloadConfig();\r\n            Moderationconfig = ModerationConfigManager.reloadConfigData();\r\n            BansIntegrationConfigManager.reloadConfig();\r\n            BansIntegrationconfig = BansIntegrationConfigManager.reloadConfigData();\r\n            MainConfManager.reloadConfig();\r\n            Config = MainConfManager.reloadConfigData();\r\n            SuggestionsConfManager.reloadConfig();\r\n            SuggestionsConfig = SuggestionsConfManager.reloadConfigData();\r\n            if (SQLconfig.isEnabled()) {\r\n                HikariConfig hikariConf = new HikariConfig();\r\n                hikariConf.setJdbcUrl(\"jdbc:\" + \"mysql\" + \"://\" +\r\n                        SQLconfig.Host() +\r\n                        \":\" + SQLconfig.Port() + \"/\" + SQLconfig.DatabaseName());\r\n                hikariConf.setUsername(SQLconfig.UserName());\r\n                hikariConf.setPassword(SQLconfig.Password());\r\n                hikariConf.setMaximumPoolSize(20);\r\n                sql = new HikariDataSource(hikariConf);\r\n                port = SQLconfig.Port();\r\n                username = SQLconfig.UserName();\r\n                host = SQLconfig.Host();\r\n                SQLEnabled = true;\r\n            } else {\r\n                port = 3306;\r\n                username = null;\r\n                host = null;\r\n                SQLEnabled = false;\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        } catch (InvalidConfigException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (!this.getDescription().getName().equals(\"DiscordSRVUtils\")) {\r\n            setEnabled(false);\r\n            System.out.println(\"[DiscordSRVUtils] Detected plugin name change.\");\r\n            return;\r\n        }\r\n        String storage = \"Unknown\";\r\n        if (SQLconfig.isEnabled()) {\r\n            storage = \"MySQL\";\r\n        } else {\r\n            storage = \"HSQLDB (local)\";\r\n        }\r\n        Bukkit.getConsoleSender().sendMessage(ChatColor.translateAlternateColorCodes('&', \"\" +\r\n                \"\\n[]=====[&2Enabling DiscordSRVUtils&r]=====[]\\n\" +\r\n                \"| &cInformation:\\n&r\" +\r\n                \"|   &cName: &rDiscordSRVUtils\\n&r\" +\r\n                \"|   &cDeveloper: &rBlue Tree\\n&r\" +\r\n                \"|   &cVersion: &r\" + getDescription().getVersion() + \"\\n&r\" +\r\n                \"|   &cStorage: &r\" + storage + \"\\n&r\" +\r\n                \"| &cSupport:\\n&r\" +\r\n                \"|   &cGithub: &rhttps://github.com/BlueTree242/DiscordSRVUtils/issues\\n\" +\r\n                \"|   &cDiscord: &rhttps://discord.gg/MMMQHA4\\n\" +\r\n                \"[]================================[]\"));\r\n        System.setProperty(\"hsqldb.reconfig_logging\", \"false\");\r\n        try {\r\n            Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\r\n        } catch (ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n\r\n        }\r\n        if (!getServer().getPluginManager().isPluginEnabled(\"DiscordSRV\")) {\r\n            getLogger().warning(\"DiscordSRVUtils could not be enabled. DiscordSRV is not installed or is not enabled.\");\r\n            getLogger().warning(\"We will add support for no discordsrv in the future.\");\r\n            setEnabled(false);\r\n            return;\r\n        }\r\n        databaseFile = getDataFolder().toPath().resolve(\"Database\");\r\n        String jdbcUrl = \"jdbc:hsqldb:file:\" + databaseFile.toAbsolutePath();\r\n        try (Connection conn = getDatabaseFile()) {\r\n            conn.prepareStatement(\"CREATE TABLE IF NOT EXISTS discordsrvutils_ticket_allowed_roles (TicketID int, RoleID Bigint)\").execute();\r\n            conn.prepareStatement(\"CREATE TABLE IF NOT EXISTS discordsrvutils_tickets (\" +\r\n                    \"TicketID int, Name Varchar(500), \" +\r\n                    \"MessageId Bigint, \" +\r\n                    \"Opened_Category Bigint, \" +\r\n                    \"Closed_Category Bigint, ChannelID Bigint)\").execute();\r\n            conn.prepareStatement(\"CREATE TABLE IF NOT EXISTS discordsrvutils_Opened_Tickets (UserID Bigint, MessageID Bigint, TicketID Bigint, Channel_id Bigint)\").execute();\r\n            conn.prepareStatement(\"CREATE TABLE IF NOT EXISTS discordsrvutils_Closed_Tickets (UserID Bigint, MessageID Bigint, TicketID Bigint, Channel_id Bigint, Closed_Message Bigint)\").execute();\r\n            conn.prepareStatement(\"CREATE TABLE IF NOT EXISTS discordsrvutils_leveling (userID Bigint, unique_id varchar(36), level int, XP int, DiscordMessages Bigint, MinecraftMessages Bigint)\").execute();\r\n            conn.prepareStatement(\"CREATE TABLE IF NOT EXISTS discordsrvutils_suggestions (Userid Bigint, Channel Bigint, Message Bigint, Suggestion varchar(10000), Number int, isAccepted varchar(50), staffReply varchar(1000), staffReplier Bigint)\").execute();\r\n            try {\r\n                PreparedStatement p1 = conn.prepareStatement(\"SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ? AND COLUMN_NAME = ?\");\r\n                p1.setString(1, \"discordsrvutils_leveling\");\r\n                p1.setString(2, \"DiscordMessages\");\r\n                ResultSet r1 = p1.executeQuery();\r\n                if (!r1.next()) {\r\n                    conn.prepareStatement(\"ALTER TABLE discordsrvutils_leveling ADD COLUMN DiscordMessages Bigint\").execute();\r\n                    conn.prepareStatement(\"ALTER TABLE discordsrvutils_leveling ADD COLUMN MinecraftMessages Bigint\").execute();\r\n                }\r\n            } catch (SQLException ex) {\r\n                if (SQLEnabled) {\r\n                    ex.printStackTrace();\r\n                }\r\n            }\r\n            PreparedStatement p2 = conn.prepareStatement(\"SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ? AND COLUMN_NAME = ?\");\r\n            p2.setString(1, \"discordsrvutils_suggestions\");\r\n            p2.setString(2, \"isAccepted\");\r\n            ResultSet r2 = p2.executeQuery();\r\n            if (!r2.next()) {\r\n                conn.prepareStatement(\"ALTER TABLE discordsrvutils_suggestions ADD COLUMN isAccepted varchar(225)\").execute();\r\n                conn.prepareStatement(\"ALTER TABLE discordsrvutils_suggestions ADD COLUMN staffReply varchar(1000)\").execute();\r\n                conn.prepareStatement(\"ALTER TABLE discordsrvutils_suggestions ADD COLUMN staffReplier Bigint\").execute();\r\n            }\r\n        } catch (SQLException exception) {\r\n            if (SQLEnabled) exception.printStackTrace();\r\n\r\n        }\r\n        try (Connection conn = getMemoryConnection()) {\r\n            conn.prepareStatement(\"CREATE TABLE suggestions_Awaiting (userid Bigint, Channel Bigint, LastOutput Bigint)\").execute();\r\n            conn.prepareStatement(\"CREATE TABLE status (Status int)\").execute();\r\n            conn.prepareStatement(\"CREATE TABLE tickets_creating (UserID Bigint, Channel_id Bigint, step int, Name Varchar(500), MessageId Bigint, Opened_Category Bigint, Closed_Category Bigint, TicketID int); \").execute();\r\n            conn.prepareStatement(\"CREATE TABLE discordsrvutils_ticket_allowed_roles (UserID Bigint, Channel_id Bigint, RoleID Bigint)\").execute();\r\n            conn.prepareStatement(\"CREATE TABLE discordsrvutils_Awaiting_Edits (Channel_id Bigint, UserID Bigint, Type int, MessageID Bigint, TicketID int)\").execute();\r\n            conn.prepareStatement(\"CREATE TABLE helpmsges (userid Bigint, Channel Bigint, MessageID Bigint, lastOutput Bigint, Page int)\").execute();\r\n            conn.prepareStatement(\"CREATE TABLE srmsgesreply (userid Bigint, Channel Bigint, SuggestionID Bigint, step int, Awaiting_isAccepted Bigint, isAccepted varchar(50), LastOutput Bigint)\").execute();\r\n        } catch (SQLException exception) {\r\n            exception.printStackTrace();\r\n        }\r\n        if (getServer().getPluginManager().isPluginEnabled(\"Essentials\")) {\r\n            getServer().getPluginManager().registerEvents(new EssentialsAfk(this), this);\r\n        }\r\n        if (getServer().getPluginManager().isPluginEnabled(\"AdvancedBan\")) {\r\n            getServer().getPluginManager().registerEvents(new AdvancedBanListener(this), this);\r\n        }\r\n\r\n        Objects.requireNonNull(getCommand(\"discordsrvutils\")).setExecutor(new DiscordSRVUtilsCommand(this));\r\n        Objects.requireNonNull(getCommand(\"discordsrvutils\")).setTabCompleter(new DiscordSRVUtilsTabCompleter());\r\n        this.discordListener = new DiscordSRVEventListener(this);\r\n        this.JDALISTENER = new JDAEvents(this);\r\n        Bukkit.getPluginManager().registerEvents(new BukkitEventListener(this), this);\r\n\r\n        DiscordSRV.api.subscribe(discordListener);\r\n        getCommand(\"setlevel\").setExecutor(new setlevelCommand(this));\r\n        getCommand(\"addlevels\").setExecutor(new addlevelsCommand(this));\r\n        getCommand(\"removelevels\").setExecutor(new removelevelsCommand(this));\r\n        getCommand(\"setxp\").setExecutor(new setxpCommand(this));\r\n        getCommand(\"addxp\").setExecutor(new addxpCommand(this));\r\n        getCommand(\"removexp\").setExecutor(new removeXPCommand(this));\r\n\r\n        if (DiscordSRV.isReady) {\r\n            getJda().addEventListener(JDALISTENER);\r\n            String status = BotSettingsconfig.status();\r\n            if (status != null) {\r\n                switch (status.toUpperCase()) {\r\n                    case \"DND\":\r\n                        getJda().getPresence().setStatus(OnlineStatus.DO_NOT_DISTURB);\r\n                        break;\r\n                    case \"IDLE\":\r\n                        getJda().getPresence().setStatus(OnlineStatus.IDLE);\r\n                        break;\r\n                    case \"ONLINE\":\r\n                        getJda().getPresence().setStatus(OnlineStatus.ONLINE);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        String newVersion = UpdateChecker.getLatestVersion();\r\n        if (newVersion.equalsIgnoreCase(getDescription().getVersion())) {\r\n            getLogger().info(ChatColor.GREEN + \"No new version available. (\" + newVersion + \")\");\r\n        } else {\r\n            getLogger().info(ChatColor.GREEN + \"A new version is available. Please update ASAP!\" + \" Your version: \" + ChatColor.YELLOW + getDescription().getVersion() + ChatColor.GREEN + \" New version: \" + ChatColor.YELLOW + newVersion);\r\n        }\r\n\r\n        int pluginId = 9456; // <-- Replace with the id of your plugin!\r\n        Metrics metrics = new Metrics(this, pluginId);\r\n        PAPI = Bukkit.getPluginManager().isPluginEnabled(\"PlaceholderAPI\");\r\n        if (Bukkit.getPluginManager().getPlugin(\"PlaceholderAPI\") != null) {\r\n            Bukkit.getScheduler().runTask(this, () -> {\r\n                new PlaceholderAPI().register();\r\n\r\n            });\r\n        }\r\n        Bukkit.getServer().getScheduler().scheduleSyncRepeatingTask(this, new Lag(), 100L, 1L);\r\n\r\n        timer2.schedule(new TimeHandler(this), 0, 1000);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onLoad() {\r\n        if (!this.getDescription().getName().equals(\"DiscordSRVUtils\")) {\r\n            setEnabled(false);\r\n        }\r\n        if (getServer().getPluginManager().getPlugin(\"DiscordSRV\") != null) {\r\n            DiscordSRV.api.requireIntent(GatewayIntent.GUILD_MESSAGE_REACTIONS);\r\n        }\r\n    }\r\n\r\n    public Connection getDatabaseFile() throws SQLException {\r\n        if (!SQLEnabled) {\r\n            return DriverManager.getConnection(\"jdbc:hsqldb:file:\" + getDataFolder().toPath().resolve(\"Database\") + \";hsqldb.lock_file=false\", \"SA\", \"\");\r\n        }\r\n\r\n        return sql.getConnection();\r\n    }\r\n\r\n    public Connection getMemoryConnection() throws SQLException {\r\n        return DriverManager.getConnection(\"jdbc:hsqldb:mem:MemoryDatabase\", \"SA\", \"\");\r\n    }\r\n\r\n    @Override\r\n    public void onDisable() {\r\n        timer.cancel();\r\n    }\r\n\r\n    public Person getPersonByUUID(UUID uuid) {\r\n        if (uuid == null) return null;\r\n        if (!Bukkit.getOfflinePlayer(uuid).hasPlayedBefore()) {\r\n            if (Bukkit.getOfflinePlayer(uuid).isOnline()) {\r\n\r\n            } else return null;\r\n        }\r\n        String UserID = DiscordSRV.getPlugin().getAccountLinkManager().getDiscordId(uuid);\r\n        if (UserID == null) {\r\n            return new PersonImpl(uuid, null, this);\r\n        }\r\n        return new PersonImpl(uuid, DiscordSRV.getPlugin().getMainGuild().getMemberById(UserID), this);\r\n    }\r\n\r\n    public Person getPersonByDiscordID(Long id) {\r\n        if (DiscordSRV.getPlugin().getMainGuild().getMemberById(id) == null) return null;\r\n        UUID uuid = DiscordSRV.getPlugin().getAccountLinkManager().getUuid(id.toString());\r\n        if (uuid == null) return new PersonImpl(null, DiscordSRV.getPlugin().getMainGuild().getMemberById(id), this);\r\n        return new PersonImpl(uuid, DiscordSRV.getPlugin().getMainGuild().getMemberById(id), this);\r\n    }\r\n\r\n    public LeaderBoardManager getLeaderBoardManager() {\r\n        return new LeaderBoardManagerImpl(this);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tech/bedev/discordsrvutils/DiscordSRVUtils.java	(revision 52e72c775d8a697877a85792d687acbb295159cc)
+++ src/main/java/tech/bedev/discordsrvutils/DiscordSRVUtils.java	(date 1610999968836)
@@ -27,6 +27,7 @@
 import java.util.*;
 
 public class DiscordSRVUtils extends JavaPlugin {
+    Thread thread = new Thread();
     public static boolean isReady = false;
     public static boolean PAPI;
     public static Timer timer = new Timer();
@@ -115,6 +116,8 @@
 
     @Override
     public void onEnable() {
+        thread.setName("DiscordSRVUtils");
+        
         try {
             SQLConfigManager.reloadConfig();
             LevelingConfigManager.reloadConfig();
@@ -280,12 +283,13 @@
             }
         }
         String newVersion = UpdateChecker.getLatestVersion();
-        if (newVersion.equalsIgnoreCase(getDescription().getVersion())) {
-            getLogger().info(ChatColor.GREEN + "No new version available. (" + newVersion + ")");
-        } else {
-            getLogger().info(ChatColor.GREEN + "A new version is available. Please update ASAP!" + " Your version: " + ChatColor.YELLOW + getDescription().getVersion() + ChatColor.GREEN + " New version: " + ChatColor.YELLOW + newVersion);
+        if (newVersion != null) {
+            if (newVersion.equalsIgnoreCase(getDescription().getVersion())) {
+                getLogger().info(ChatColor.GREEN + "No new version available. (" + newVersion + ")");
+            } else {
+                getLogger().info(ChatColor.GREEN + "A new version is available. Please update ASAP!" + " Your version: " + ChatColor.YELLOW + getDescription().getVersion() + ChatColor.GREEN + " New version: " + ChatColor.YELLOW + newVersion);
+            }
         }
-
         int pluginId = 9456; // <-- Replace with the id of your plugin!
         Metrics metrics = new Metrics(this, pluginId);
         PAPI = Bukkit.getPluginManager().isPluginEnabled("PlaceholderAPI");
@@ -298,6 +302,7 @@
         Bukkit.getServer().getScheduler().scheduleSyncRepeatingTask(this, new Lag(), 100L, 1L);
 
         timer2.schedule(new TimeHandler(this), 0, 1000);
+        thread.start();
 
     }
 
@@ -325,6 +330,7 @@
 
     @Override
     public void onDisable() {
+        thread.stop();
         timer.cancel();
     }
 
Index: src/main/java/tech/bedev/discordsrvutils/events/JDAEvents.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tech.bedev.discordsrvutils.events;\r\n\r\nimport com.vdurmont.emoji.EmojiParser;\r\nimport github.scarsz.discordsrv.DiscordSRV;\r\nimport github.scarsz.discordsrv.dependencies.jda.api.EmbedBuilder;\r\nimport github.scarsz.discordsrv.dependencies.jda.api.Permission;\r\nimport github.scarsz.discordsrv.dependencies.jda.api.entities.*;\r\nimport github.scarsz.discordsrv.dependencies.jda.api.events.channel.text.TextChannelDeleteEvent;\r\nimport github.scarsz.discordsrv.dependencies.jda.api.events.guild.member.GuildMemberJoinEvent;\r\nimport github.scarsz.discordsrv.dependencies.jda.api.events.message.MessageDeleteEvent;\r\nimport github.scarsz.discordsrv.dependencies.jda.api.events.message.guild.GuildMessageReceivedEvent;\r\nimport github.scarsz.discordsrv.dependencies.jda.api.events.message.react.MessageReactionAddEvent;\r\nimport github.scarsz.discordsrv.dependencies.jda.api.hooks.ListenerAdapter;\r\nimport me.leoko.advancedban.manager.PunishmentManager;\r\nimport me.leoko.advancedban.manager.UUIDManager;\r\nimport org.bukkit.Bukkit;\r\nimport org.bukkit.ChatColor;\r\nimport tech.bedev.discordsrvutils.DiscordSRVUtils;\r\nimport tech.bedev.discordsrvutils.Managers.ConfOptionsManager;\r\nimport tech.bedev.discordsrvutils.Managers.Stopwatch;\r\nimport tech.bedev.discordsrvutils.Managers.Tickets;\r\nimport tech.bedev.discordsrvutils.Managers.TimerManager;\r\nimport tech.bedev.discordsrvutils.Person.MessageType;\r\nimport tech.bedev.discordsrvutils.Person.Person;\r\nimport tech.bedev.discordsrvutils.leaderboard.LeaderBoardManager;\r\nimport tech.bedev.discordsrvutils.utils.PlayerUtil;\r\n\r\nimport java.awt.*;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.time.Duration;\r\nimport java.util.List;\r\nimport java.util.*;\r\n\r\npublic class JDAEvents extends ListenerAdapter {\r\n    private static final Long EXPIRATION_NANOS = Duration.ofSeconds(60L).toNanos();\r\n    private static final Random RANDOM = new Random();\r\n    private DiscordSRVUtils core;\r\n    private ConfOptionsManager conf;\r\n    private Tickets tickets;\r\n\r\n    public JDAEvents(DiscordSRVUtils core) {\r\n        this.core = core;\r\n        this.tickets = new Tickets(core);\r\n        conf = new ConfOptionsManager(core);\r\n    }\r\n\r\n    public static boolean isNumberic(String s) {\r\n        try {\r\n            Long.parseLong(s);\r\n            return true;\r\n        } catch (NumberFormatException ex) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onGuildMemberJoin(GuildMemberJoinEvent e) {\r\n        if (DiscordSRVUtils.BotSettingsconfig.isBungee()) return;\r\n        if (e.getUser().isBot()) {\r\n            if (DiscordSRVUtils.Config.isIgnoreBots()) {\r\n                return;\r\n            }\r\n        }\r\n        Bukkit.getScheduler().runTask(core, () -> {\r\n            if (Bukkit.getPluginManager().isPluginEnabled(\"AdvancedBan\")) {\r\n                UUID puuid = DiscordSRV.getPlugin().getAccountLinkManager().getUuid(e.getUser().getId());\r\n                if (puuid != null) {\r\n                    String pname = Bukkit.getOfflinePlayer(puuid).getName();\r\n\r\n                    if (PunishmentManager.get().isBanned(UUIDManager.get().getUUID(pname))) {\r\n                        if (DiscordSRVUtils.BansIntegrationconfig.isSyncPunishmentsWithDiscord()) {\r\n                            e.getGuild().ban(e.getMember().getUser(), 0, \"DiscordSRVUtils banned by Advancedban\").queue();\r\n                            return;\r\n                        }\r\n                    } else if (PunishmentManager.get().isMuted(UUIDManager.get().getUUID(pname))) {\r\n                        if (DiscordSRVUtils.BansIntegrationconfig.isSyncPunishmentsWithDiscord()) {\r\n                            e.getGuild().addRoleToMember(e.getMember(), e.getGuild().getRoleById(DiscordSRVUtils.Moderationconfig.MutedRole())).queue();\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n\r\n            EmbedBuilder embed = new EmbedBuilder().setDescription(String.join(\"\\n\",\r\n                    DiscordSRVUtils.Config.WelcomerMessage())\r\n                    .replace(\"[User_Name]\", e.getMember().getUser().getName())\r\n                    .replace(\"[User_Mention]\", e.getMember().getAsMention())\r\n                    .replace(\"[User_tag]\", e.getMember().getUser().getAsTag())\r\n            );\r\n\r\n\r\n            String config = DiscordSRVUtils.Config.WelcomerEmbedColor();\r\n\r\n            if (config != null) {\r\n                switch (config.toUpperCase()) {\r\n                    case \"AQUA\":\r\n                        embed.setColor(1752220);\r\n                        break;\r\n                    case \"GREEN\":\r\n                        embed.setColor(3066993);\r\n                        break;\r\n                    case \"BLUE\":\r\n                        embed.setColor(3447003);\r\n                        break;\r\n                    case \"PURPLE\":\r\n                        embed.setColor(10181046);\r\n                        break;\r\n                    case \"GOLD\":\r\n                        embed.setColor(15844367);\r\n                        break;\r\n                    case \"ORANGE\":\r\n                        embed.setColor(15105570);\r\n                        break;\r\n                    case \"RED\":\r\n                        embed.setColor(15158332);\r\n                        break;\r\n                    case \"GREY\":\r\n                        embed.setColor(9807270);\r\n                        break;\r\n                    case \"DARKER_GREY\":\r\n                        embed.setColor(8359053);\r\n                        break;\r\n                    case \"NAVY\":\r\n                        embed.setColor(3426654);\r\n                        break;\r\n                    case \"DARK_AQUA\":\r\n                        embed.setColor(1146986);\r\n                        break;\r\n                    case \"DARK_GREEN\":\r\n                        embed.setColor(2067276);\r\n                        break;\r\n                    case \"DARK_BLUE\":\r\n                        embed.setColor(2123412);\r\n                        break;\r\n                    case \"DARk_PURPLE\":\r\n                        embed.setColor(7419530);\r\n                        break;\r\n                    case \"DARK_GOLD\":\r\n                        embed.setColor(12745742);\r\n                        break;\r\n                    case \"DARK_ORANGE\":\r\n                        embed.setColor(11027200);\r\n                        break;\r\n                    case \"DARK_RED\":\r\n                        embed.setColor(10038562);\r\n                        break;\r\n                    case \"DARK_GREY\":\r\n                        embed.setColor(9936031);\r\n                        break;\r\n                    case \"LIGHT_GREY\":\r\n                        embed.setColor(12370112);\r\n                        break;\r\n                    case \"DARK_NAVY\":\r\n                        embed.setColor(2899536);\r\n                        break;\r\n                    case \"LUMINOUS_VIVID_PINK\":\r\n                        embed.setColor(16580705);\r\n                        break;\r\n                    case \"DARK_VIVID_PINK\":\r\n                        embed.setColor(12320855);\r\n                        break;\r\n                    default:\r\n                        PlayerUtil.sendToAuthorizedPlayers(\"&cError: &eInvalid color in welcomer_message_embed_color\");\r\n\r\n\r\n                }\r\n                TextChannel ch = e.getGuild().getTextChannelById(DiscordSRVUtils.Config.WelcomerChannel());\r\n                if (ch != null)\r\n                    ch.sendMessage(embed.build()).queue();\r\n\r\n            }\r\n            if (DiscordSRVUtils.Config.isJoinMessageToOnlinePlayers()) {\r\n                String message = DiscordSRVUtils.Config.McWelcomerMessage();\r\n                if (message != null) {\r\n                    Bukkit.broadcastMessage(ChatColor.translateAlternateColorCodes('&', message)\r\n                            .replace(\"[User_Tag]\", e.getMember().getUser().getAsTag())\r\n                            .replace(\"[User_Name]\", e.getMember().getUser().getName())\r\n                            .replace(\"[Guild_Name]\", e.getGuild().getName()));\r\n                } else {\r\n                    core.getLogger().warning(\"Could not send welcomer message to online players, mc_welcomer_message is not set in the config.\");\r\n                    PlayerUtil.sendToAuthorizedPlayers(\"&cError: &eCould not send welcomer message to online players, mc_welcomer_message is not set in the config.\");\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onGuildMessageReceived(GuildMessageReceivedEvent e) {\r\n\r\n        if (e.getAuthor().isFake()) return;\r\n        if (e.getAuthor().isBot()) return;\r\n        String[] args = e.getMessage().getContentRaw().split(\"\\\\s+\");\r\n        String prefix = DiscordSRVUtils.BotSettingsconfig.BotPrefix();\r\n        if (args[0].equalsIgnoreCase(prefix + \"createticket\")) {\r\n            if (!DiscordSRVUtils.BotSettingsconfig.isBungee()) {\r\n\r\n                if (e.getMember().hasPermission(Permission.MANAGE_SERVER)) {\r\n                    try (Connection conn = core.getMemoryConnection()) {\r\n                        try (PreparedStatement p1 = conn.prepareStatement(\"SELECT * FROM tickets_creating WHERE UserID=? AND Channel_id=?\")) {\r\n                            p1.setLong(1, e.getMember().getIdLong());\r\n                            p1.setLong(2, e.getChannel().getIdLong());\r\n                            p1.execute();\r\n                            try (ResultSet r1 = p1.executeQuery()) {\r\n                                if (!r1.next()) {\r\n                                    try (PreparedStatement p2 = conn.prepareStatement(\"INSERT INTO tickets_creating (UserID, Channel_ID, step) VALUES (?,?, 0);\")) {\r\n                                        p2.setLong(1, e.getMember().getIdLong());\r\n                                        p2.setLong(2, e.getChannel().getIdLong());\r\n                                        p2.execute();\r\n                                        EmbedBuilder embed = new EmbedBuilder();\r\n                                        embed.setColor(Color.RED);\r\n                                        embed.setTitle(\"Create new ticket\");\r\n                                        embed.setDescription(\"**Step 1:** What is the name of the ticket?\\n\\n To cancel this process, reply with `cancel`\");\r\n                                        e.getChannel().sendMessage(embed.build()).queue();\r\n                                        return;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } catch (SQLException ex) {\r\n                        e.getChannel().sendMessage(\"Could not save data. Please try again later or restart your server.\").queue();\r\n                    }\r\n\r\n                } else {\r\n                    e.getChannel().sendMessage(\"No permission (Required: **MANAGE SERVER**)\").queue();\r\n                }\r\n            }\r\n        } else if (args[0].equalsIgnoreCase(prefix + \"ticketlookup\")) {\r\n            if (!DiscordSRVUtils.BotSettingsconfig.isBungee()) {\r\n                if (e.getMember().hasPermission(Permission.MANAGE_SERVER)) {\r\n                    if (!(args.length >= 2)) {\r\n                        e.getChannel().sendMessage(\"**Usage:** \" + prefix + \"ticketlookup <ticket name>\").queue();\r\n\r\n                    } else {\r\n                        try (Connection conn = core.getDatabaseFile()) {\r\n                            String argss = \"\";\r\n                            for (int i = 1; i < args.length; i++) {\r\n                                argss = argss + args[i] + \" \";\r\n                            }\r\n                            PreparedStatement p1 = conn.prepareStatement(\"SELECT * FROM discordsrvutils_tickets WHERE Name=?\");\r\n                            p1.setString(1, argss.replaceAll(\"\\\\s+$\", \"\"));\r\n                            p1.execute();\r\n                            ResultSet r1 = p1.executeQuery();\r\n                            EmbedBuilder embed = new EmbedBuilder();\r\n                            embed.setTitle(\"Tickets with name \\\"\" + argss.replaceAll(\"\\\\s+$\", \"\") + \"\\\"\");\r\n                            embed.setColor(Color.CYAN);\r\n                            int number = 0;\r\n                            while (r1.next()) {\r\n                                number = number + 1;\r\n                                PreparedStatement p2 = conn.prepareStatement(\"SELECT * FROM discordsrvutils_ticket_allowed_roles WHERE TicketID=?\");\r\n                                p2.setInt(1, r1.getInt(\"TicketID\"));\r\n                                p2.execute();\r\n                                ResultSet r2 = p2.executeQuery();\r\n                                String roles = \"\";\r\n                                while (r2.next()) {\r\n                                    roles = \"<@&\" + r2.getLong(\"RoleID\") + \"> \" + roles;\r\n                                }\r\n                                embed.addField(\"ID: \" + r1.getInt(\"TicketID\") + \"\", \"**Name:** \" + r1.getString(\"Name\") + \"\\n**Opened category:** \" + r1.getLong(\"Opened_Category\") + \"\\n**Closed category:** \" + r1.getLong(\"Closed_Category\") + \"\\n**Ticket view allowed roles:** \" + roles + \"\\n**Channel:** \" + \"<#\" + r1.getLong(\"ChannelID\") + \">\", false);\r\n                            }\r\n                            embed.setFooter(number + \" Results found.\");\r\n                            e.getChannel().sendMessage(embed.build()).queue();\r\n                        } catch (SQLException exception) {\r\n                            exception.printStackTrace();\r\n                        }\r\n                    }\r\n                } else {\r\n                    e.getChannel().sendMessage(\"No permission (Required: **MANAGE SERVER**)\").queue();\r\n                }\r\n            }\r\n        } else if (args[0].equalsIgnoreCase(prefix + \"close\")) {\r\n            if (!DiscordSRVUtils.BotSettingsconfig.isBungee()) {\r\n                try (Connection conn = core.getDatabaseFile()) {\r\n\r\n                    PreparedStatement p1 = conn.prepareStatement(\"SELECT * FROM discordsrvutils_Opened_Tickets WHERE Channel_id=?\");\r\n                    p1.setLong(1, e.getChannel().getIdLong());\r\n                    p1.execute();\r\n                    ResultSet r1 = p1.executeQuery();\r\n                    if (r1.next()) {\r\n\r\n                        PreparedStatement closed = conn.prepareStatement(\"SELECT * FROM discordsrvutils_Opened_Tickets WHERE MessageID=?\");\r\n                        closed.setLong(1, e.getMessageIdLong());\r\n                        closed.execute();\r\n                        ResultSet closed2 = closed.executeQuery();\r\n                        closed2.next();\r\n                        PreparedStatement tickets = conn.prepareStatement(\"SELECT * FROM discordsrvutils_tickets WHERE TicketID=?\");\r\n                        tickets.setLong(1, r1.getInt(\"TicketID\"));\r\n                        tickets.execute();\r\n                        ResultSet ticketss = tickets.executeQuery();\r\n                        ticketss.next();\r\n                        EmbedBuilder embed = new EmbedBuilder();\r\n                        embed.setTitle(\"Ticket Closed\");\r\n                        embed.setColor(Color.YELLOW);\r\n                        embed.setDescription(\"Ticket Closed by \" + e.getMember().getAsMention() + \"\");\r\n                        e.getChannel().sendMessage(embed.build()).queue(msg -> {\r\n                            try (Connection conn3 = core.getDatabaseFile()) {\r\n                                ;\r\n                                PreparedStatement prpstmt = conn3.prepareStatement(\"SELECT * FROM discordsrvutils_Opened_Tickets WHERE Channel_id=?\");\r\n                                prpstmt.setLong(1, e.getChannel().getIdLong());\r\n                                prpstmt.execute();\r\n                                ResultSet rr = prpstmt.executeQuery();\r\n                                rr.next();\r\n                                PreparedStatement ppp = conn3.prepareStatement(\"INSERT INTO discordsrvutils_Closed_Tickets (UserID, MessageID, TicketID, Channel_id, Closed_Message) VALUES (?, ?, ?, ?, ?)\");\r\n                                ppp.setLong(1, rr.getLong(\"UserID\"));\r\n                                ppp.setLong(2, rr.getLong(\"MessageID\"));\r\n                                ppp.setLong(3, rr.getInt(\"TicketID\"));\r\n                                ppp.setLong(4, rr.getLong(\"Channel_id\"));\r\n                                ppp.setLong(5, msg.getIdLong());\r\n                                ppp.execute();\r\n                                PreparedStatement prp = conn3.prepareStatement(\"DELETE FROM discordsrvutils_Opened_Tickets WHERE Channel_id=?\");\r\n                                prp.setLong(1, e.getChannel().getIdLong());\r\n                                prp.execute();\r\n                            } catch (SQLException ex) {\r\n                                ex.printStackTrace();\r\n                            }\r\n                            msg.addReaction(\"\\uD83D\\uDDD1️\").queue();\r\n                        });\r\n                        e.getChannel().getPermissionOverride(e.getGuild().getMemberById(r1.getLong(\"UserID\"))).getManager().setDeny(Permission.VIEW_CHANNEL).queue();\r\n                        PreparedStatement pp = conn.prepareStatement(\"SELECt * FROM discordsrvutils_tickets WHERE TicketID=?\");\r\n                        pp.setInt(1, r1.getInt(\"TicketID\"));\r\n                        pp.execute();\r\n                        ResultSet rr = pp.executeQuery();\r\n                        rr.next();\r\n                        System.out.println(rr.getLong(\"Closed_Category\"));\r\n                        System.out.println(ticketss.getLong(\"Closed_Category\"));\r\n                        e.getChannel().getManager().setParent(e.getGuild().getCategoryById(ticketss.getLong(\"Closed_Category\"))).queue();\r\n                        e.getChannel().getManager().setName(e.getChannel().getName().replace(\"opened\", \"closed\")).queue();\r\n\r\n\r\n                    } else e.getChannel().sendMessage(\"You are not on an opened ticket\").queue();\r\n                } catch (SQLException exception) {\r\n                    exception.printStackTrace();\r\n                }\r\n            }\r\n\r\n        } else if (args[0].equalsIgnoreCase(prefix + \"editticket\")) {\r\n            if (!DiscordSRVUtils.BotSettingsconfig.isBungee()) {\r\n                if (!(args.length >= 2)) {\r\n                    e.getChannel().sendMessage(\"**Usage:** \" + prefix + \"editticket <Ticket ID>\").queue();\r\n                } else {\r\n                    if (e.getMember().hasPermission(Permission.MANAGE_SERVER)) {\r\n                        try (Connection fconn = core.getDatabaseFile()) {\r\n                            Connection conn = core.getMemoryConnection();\r\n                            PreparedStatement p1 = conn.prepareStatement(\"SELECT * FROM discordsrvutils_Awaiting_Edits WHERE Channel_id=? AND UserID=?\");\r\n                            p1.setLong(1, e.getChannel().getIdLong());\r\n                            p1.setLong(2, e.getMember().getIdLong());\r\n                            p1.execute();\r\n                            ResultSet r1 = p1.executeQuery();\r\n\r\n                            PreparedStatement p2 = fconn.prepareStatement(\"SELECT * FROM discordsrvutils_tickets WHERE TicketID=?\");\r\n                            p2.setInt(1, Integer.parseInt(args[1]));\r\n                            p2.execute();\r\n                            ResultSet r2 = p2.executeQuery();\r\n                            if (!r1.next()) {\r\n                                if (r2.next()) {\r\n                                    EmbedBuilder embed = new EmbedBuilder();\r\n                                    embed.setDescription(\"**:one: Name\\n\\n:two: Opened category\\n\\n:three: Closed category\\n\\n:four: Ticket view allowed roles\\n\\n:five: Message Channel**\");\r\n                                    e.getChannel().sendMessage(embed.build()).queue(message -> {\r\n                                        message.addReaction(\"1️⃣\").queue();\r\n                                        message.addReaction(\"2️⃣\").queue();\r\n                                        message.addReaction(\"3️⃣\").queue();\r\n                                        message.addReaction(\"4️⃣\").queue();\r\n                                        message.addReaction(\"5️⃣\").queue();\r\n                                        try {\r\n                                            Connection conn2 = core.getMemoryConnection();\r\n                                            PreparedStatement p3 = conn2.prepareStatement(\"INSERT INTO discordsrvutils_Awaiting_Edits (Channel_id, UserID, MessageID, TicketID, Type) VALUES (?, ?, ?, ?, 0)\");\r\n                                            p3.setLong(1, e.getChannel().getIdLong());\r\n                                            p3.setLong(2, e.getMember().getIdLong());\r\n                                            p3.setLong(3, message.getIdLong());\r\n                                            p3.setInt(4, Integer.parseInt(args[1]));\r\n                                            p3.execute();\r\n                                        } catch (SQLException ex) {\r\n                                            ex.printStackTrace();\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    EmbedBuilder embed = new EmbedBuilder();\r\n                                    embed.setColor(Color.RED);\r\n                                    embed.setTitle(\"Invalid ticket ID\");\r\n                                    embed.setDescription(\"\\nHaving troubles getting Ticket ID? use `\" + prefix + \"ticketlookup <TicketName>`.\");\r\n                                    e.getChannel().sendMessage(embed.build()).queue();\r\n\r\n                                }\r\n                            }\r\n                        } catch (SQLException ex) {\r\n                            ex.printStackTrace();\r\n                        } catch (NumberFormatException ex) {\r\n                            EmbedBuilder embed = new EmbedBuilder();\r\n                            embed.setColor(Color.RED);\r\n                            embed.setTitle(\"Invalid ticket ID\");\r\n                            embed.setDescription(\"\\nHaving troubles getting Ticket ID? use `\" + prefix + \"ticketlookup <TicketName>`.\");\r\n                            e.getChannel().sendMessage(embed.build()).queue();\r\n                        }\r\n                    } else {\r\n                        e.getChannel().sendMessage(\"No permission (Required: **MANAGE SERVER**)\").queue();\r\n                    }\r\n                }\r\n            }\r\n        } else if (args[0].equalsIgnoreCase(prefix + \"help\")) {\r\n            if (!DiscordSRVUtils.BotSettingsconfig.isBungee()) {\r\n                Map<Integer, String> map = new HashMap<>();\r\n                int pages = 0;\r\n                pages++;\r\n                map.put(pages, \"Tickets\");\r\n                if (DiscordSRVUtils.Levelingconfig.Leveling_Enabled()) {\r\n                    pages++;\r\n                    map.put(pages, \"Leveling\");\r\n                }\r\n                if (DiscordSRVUtils.Moderationconfig.isModeratorCommandsEnabled()) {\r\n                    pages++;\r\n                    map.put(pages, \"Moderation\");\r\n                }\r\n                if (DiscordSRVUtils.SuggestionsConfig.isEnabled()) {\r\n                    pages++;\r\n                    map.put(pages, \"Suggestions\");\r\n                }\r\n                EmbedBuilder embed = new EmbedBuilder();\r\n                embed.setTitle(\"Page 1 | Tickets\");\r\n                embed.setDescription(\"`\" + prefix + \"createticket`, `\" + prefix + \"ticketlookup`, `\" + prefix + \"editticket`, `\" + prefix + \"close`, `\" + prefix + \"deleteticket`, `\" + prefix + \"editticket`\");\r\n                embed.setColor(Color.GREEN);\r\n                e.getChannel().sendMessage(embed.build()).queue(msg -> {\r\n                    try (Connection conn = core.getMemoryConnection()) {\r\n                        PreparedStatement p1 = conn.prepareStatement(\"INSERT INTO helpmsges (userid, Channel, MessageID, lastOutput, Page) VALUES (?, ?, ?, ?, ?)\");\r\n                        p1.setLong(1, e.getMember().getIdLong());\r\n                        p1.setLong(2, e.getChannel().getIdLong());\r\n                        p1.setLong(3, msg.getIdLong());\r\n                        p1.setLong(4, System.currentTimeMillis());\r\n                        p1.setInt(5, 1);\r\n                        p1.execute();\r\n                        msg.addReaction(\"⬅️\").queue();\r\n                        msg.addReaction(\"➡️\").queue();\r\n                        msg.addReaction(\"\\uD83D\\uDDD1️\").queue();\r\n                    } catch (SQLException ex) {\r\n                        e.getMessage().delete().queue();\r\n                        ex.printStackTrace();\r\n                    }\r\n                });\r\n            }\r\n        } else if (args[0].equalsIgnoreCase(prefix + \"deleteticket\")) {\r\n            if (!DiscordSRVUtils.BotSettingsconfig.isBungee()) {\r\n\r\n                if (!(args.length >= 2)) {\r\n                    e.getChannel().sendMessage(\"**Usage:** \" + prefix + \"deleteticketticket <Ticket ID>\").queue();\r\n                } else {\r\n                    if (e.getMember().hasPermission(Permission.MANAGE_SERVER)) {\r\n                        try (Connection conn = core.getDatabaseFile()) {\r\n                            ;\r\n                            PreparedStatement p1 = conn.prepareStatement(\"SELECT * FROM discordsrvutils_tickets WHERE TicketID=?\");\r\n                            p1.setInt(1, Integer.parseInt(args[1]));\r\n                            p1.execute();\r\n                            ResultSet r1 = p1.executeQuery();\r\n                            if (r1.next()) {\r\n                                PreparedStatement p2 = conn.prepareStatement(\"DELETE FROM discordsrvutils_tickets WHERE TicketID=?\");\r\n                                p2.setInt(1, Integer.parseInt(args[1]));\r\n                                p2.execute();\r\n                                PreparedStatement p3 = conn.prepareStatement(\"DELETE FROM discordsrvutils_ticket_allowed_roles WHERE TicketID=?\");\r\n                                p3.setInt(1, Integer.parseInt(args[1]));\r\n                                p3.execute();\r\n                                PreparedStatement p4 = conn.prepareStatement(\"SELECT * FROM discordsrvutils_opened_tickets WHERE TicketID=?\");\r\n                                p4.setInt(1, Integer.parseInt(args[1]));\r\n                                ResultSet r2 = p4.executeQuery();\r\n                                while (r2.next()) {\r\n                                    e.getJDA().getGuildChannelById(r2.getLong(\"Channel_id\")).delete().queue();\r\n                                }\r\n                                e.getGuild().getTextChannelById(r1.getLong(\"ChannelID\")).deleteMessageById(r1.getLong(\"MessageID\")).queue();\r\n                                e.getChannel().sendMessage(\"Deleted ticket `\" + r1.getString(\"Name\") + \"`\").queue();\r\n                            } else {\r\n                                EmbedBuilder embed = new EmbedBuilder();\r\n                                embed.setColor(Color.RED);\r\n                                embed.setTitle(\"Invalid ticket ID\");\r\n                                embed.setDescription(\"\\nHaving troubles getting Ticket ID? use `\" + prefix + \"ticketlookup <TicketName>`.\");\r\n                                e.getChannel().sendMessage(embed.build()).queue();\r\n                            }\r\n\r\n                        } catch (SQLException ex) {\r\n                            ex.printStackTrace();\r\n                        } catch (NumberFormatException ex) {\r\n                            EmbedBuilder embed = new EmbedBuilder();\r\n                            embed.setColor(Color.RED);\r\n                            embed.setTitle(\"Invalid ticket ID\");\r\n                            embed.setDescription(\"\\nHaving troubles getting Ticket ID? use `\" + prefix + \"ticketlookup <TicketName>`.\");\r\n                            e.getChannel().sendMessage(embed.build()).queue();\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        e.getChannel().sendMessage(\"No permission (Required: **MANAGE SERVER**)\").queue();\r\n                    }\r\n                }\r\n            }\r\n        } else if (args[0].equalsIgnoreCase(prefix + \"level\") || args[0].equalsIgnoreCase(prefix + \"rank\")) {\r\n            if (!DiscordSRVUtils.BotSettingsconfig.isBungee()) {\r\n                if (DiscordSRVUtils.Levelingconfig.Leveling_Enabled()) {\r\n                    if (!(args.length >= 2)) {\r\n                        Person p = core.getPersonByDiscordID(e.getMember().getIdLong());\r\n                        if (!p.isLinked()) {\r\n                            e.getChannel().sendMessage(\"You are not linked. Use `/discord link` to link your account.\").queue();\r\n                        } else if (!p.isBukkitCached()) {\r\n                            e.getChannel().sendMessage(\"You didnt join for a long time\").queue();\r\n                            return;\r\n                        } else {\r\n                            EmbedBuilder embed = new EmbedBuilder();\r\n                            embed.setDescription(\"**Level:** \" + p.getLevel() + \"\\n\\n**XP:** \" + p.getXP() + \"\\n\\n**Rank:** #\" + p.getRank());\r\n                            embed.setTitle(\"Level for \" + Bukkit.getOfflinePlayer(p.getMinecraftUUID()).getName());\r\n                            embed.setColor(Color.CYAN);\r\n                            embed.setThumbnail(\"https://crafatar.com/avatars/\" + p.getMinecraftUUID());\r\n                            e.getChannel().sendMessage(embed.build()).queue();\r\n\r\n                        }\r\n                    } else {\r\n                        if (e.getMessage().getMentionedMembers().isEmpty()) {\r\n                            Person p = core.getPersonByUUID(Bukkit.getOfflinePlayer(args[1]).getUniqueId());\r\n                            if (p == null) {\r\n                                e.getChannel().sendMessage(\"Player has never joined before.\").queue();\r\n                            } else {\r\n                                EmbedBuilder embed = new EmbedBuilder();\r\n                                embed.setDescription(\"**Level:** \" + p.getLevel() + \"\\n\\n**XP:** \" + p.getXP() + \"\\n\\n**Rank:** #\" + p.getRank());\r\n                                embed.setTitle(\"Level for \" + Bukkit.getOfflinePlayer(p.getMinecraftUUID()).getName());\r\n                                embed.setColor(Color.CYAN);\r\n                                embed.setThumbnail(\"https://crafatar.com/avatars/\" + p.getMinecraftUUID());\r\n                                e.getChannel().sendMessage(embed.build()).queue();\r\n                            }\r\n                        } else {\r\n                            Member mm = e.getMessage().getMentionedMembers().get(0);\r\n                            Person p = core.getPersonByDiscordID(mm.getIdLong());\r\n                            if (p.isLinked()) {\r\n                                EmbedBuilder embed = new EmbedBuilder();\r\n                                embed.setDescription(\"**Level:** \" + p.getLevel() + \"\\n\\n**XP:** \" + p.getXP() + \"\\n\\n**Rank:** #\" + p.getRank());\r\n                                embed.setTitle(\"Level for \" + Bukkit.getOfflinePlayer(p.getMinecraftUUID()).getName());\r\n                                embed.setColor(Color.CYAN);\r\n                                embed.setThumbnail(\"https://crafatar.com/avatars/\" + p.getMinecraftUUID());\r\n                                e.getChannel().sendMessage(embed.build()).queue();\r\n                            } else if (p.isBukkitCached()) {\r\n                                e.getChannel().sendMessage(\"This player has never joined before\").queue();\r\n                                return;\r\n                            } else {\r\n                                e.getChannel().sendMessage(\"This user is not linked.\").queue();\r\n                            }\r\n                        }\r\n                    }\r\n                    return;\r\n                } else {\r\n                }\r\n            }\r\n        } else if (args[0].equalsIgnoreCase(prefix + \"ban\")) {\r\n            if (!DiscordSRVUtils.Moderationconfig.isModeratorCommandsEnabled()) return;\r\n            if (DiscordSRVUtils.BotSettingsconfig.isBungee()) return;\r\n            boolean canuse = false;\r\n            for (Role role : e.getMember().getRoles()) {\r\n                if (DiscordSRVUtils.Moderationconfig.rolesAllowedToUseModeratorCommands().contains(role.getId())) {\r\n                    canuse = true;\r\n                }\r\n                if (DiscordSRVUtils.Moderationconfig.rolesAllowedToUseModeratorCommands().contains(role.getName())) {\r\n                    canuse = true;\r\n                }\r\n            }\r\n            if (!canuse) {\r\n                if (!e.getMember().hasPermission(Permission.MANAGE_SERVER)) {\r\n                    e.getChannel().sendMessage(\"You don't have permission to use this command.\").queue();\r\n                    return;\r\n                }\r\n            }\r\n            if (!(args.length >= 2)) {\r\n                e.getChannel().sendMessage(\"Who to ban? Usage: \" + prefix + \"ban <member> <reason>\").queue();\r\n                return;\r\n            } else {\r\n                if (!(args.length >= 3)) {\r\n                    try {\r\n                        Long.parseLong(args[1]);\r\n                        Member membertoban = e.getGuild().getMemberById(args[1]);\r\n                        if (membertoban == null) {\r\n                            e.getChannel().sendMessage(\"Member not found. Usage \" + prefix + \"ban <member> <reason>\").queue();\r\n                            return;\r\n                        } else {\r\n                            if (!e.getGuild().getSelfMember().canInteract(membertoban)) {\r\n                                e.getChannel().sendMessage(\"Unable to ban Member Because his role is higher than me.\").queue();\r\n                                return;\r\n                            }\r\n                            UUID mcUUID = DiscordSRV.getPlugin().getAccountLinkManager().getUuid(membertoban.getId());\r\n                            if (mcUUID != null) {\r\n                            }\r\n                            e.getGuild().ban(membertoban, 0, \"Banned by \" + e.getMember().getUser().getAsTag()).queue();\r\n                            EmbedBuilder embed = new EmbedBuilder();\r\n                            embed.setColor(Color.GREEN);\r\n                            embed.setDescription(\"**_\" + membertoban.getUser().getAsTag() + \" Was banned._**\");\r\n                            e.getChannel().sendMessage(embed.build()).queue();\r\n                        }\r\n\r\n                    } catch (NumberFormatException ex) {\r\n                        if (e.getMessage().getMentionedMembers().isEmpty()) {\r\n                            e.getChannel().sendMessage(\"Who to ban? Usage:\" + prefix + \"ban <member> <reason>\").queue();\r\n                            return;\r\n                        } else {\r\n\r\n                            Member membertoban = e.getMessage().getMentionedMembers().get(0);\r\n                            if (!e.getGuild().getSelfMember().canInteract(membertoban)) {\r\n                                e.getChannel().sendMessage(\"Unable to ban Member Because his role is higher than me.\").queue();\r\n                                return;\r\n                            }\r\n                            e.getGuild().ban(membertoban, 0, \"Banned by \" + e.getMember().getUser().getAsTag()).queue();\r\n                            EmbedBuilder embed = new EmbedBuilder();\r\n                            embed.setColor(Color.GREEN);\r\n                            embed.setDescription(\"**_\" + membertoban.getUser().getAsTag() + \" Was banned._**\");\r\n                            e.getChannel().sendMessage(embed.build()).queue();\r\n                            return;\r\n                        }\r\n\r\n                    }\r\n                } else {\r\n                    String reason = \"\";\r\n                    for (int i = 2; i < args.length; i++) {\r\n                        reason = reason + args[i] + \" \";\r\n                    }\r\n                    try {\r\n                        Long.parseLong(args[1]);\r\n                        Member membertoban = e.getGuild().getMemberById(args[1]);\r\n                        if (membertoban == null) {\r\n                            e.getChannel().sendMessage(\"Member not found. Usage \" + prefix + \"ban <member> <reason>\").queue();\r\n                            return;\r\n                        } else {\r\n                            if (!e.getGuild().getSelfMember().canInteract(membertoban)) {\r\n                                e.getChannel().sendMessage(\"Unable to ban Member Because his role is higher than me.\").queue();\r\n                                return;\r\n                            }\r\n                            e.getGuild().ban(membertoban, 0, \"Banned by \" + e.getMember().getUser().getAsTag() + \" (\" + reason + \")\").queue();\r\n                            EmbedBuilder embed = new EmbedBuilder();\r\n                            embed.setColor(Color.GREEN);\r\n                            embed.setDescription(\"**_\" + membertoban.getUser().getAsTag() + \" Was banned._**\");\r\n                            e.getChannel().sendMessage(embed.build()).queue();\r\n                        }\r\n\r\n                    } catch (NumberFormatException ex) {\r\n                        if (e.getMessage().getMentionedMembers().isEmpty()) {\r\n                            e.getChannel().sendMessage(\"Who to ban? Usage:\" + prefix + \"ban <member> <reason>\").queue();\r\n                            return;\r\n                        } else {\r\n                            Member membertoban = e.getMessage().getMentionedMembers().get(0);\r\n                            if (!e.getGuild().getSelfMember().canInteract(membertoban)) {\r\n                                e.getChannel().sendMessage(\"Unable to ban Member Because his role is higher than me.\").queue();\r\n                                return;\r\n                            }\r\n                            e.getGuild().ban(membertoban, 0, \"Banned by \" + e.getMember().getUser().getAsTag() + \" (\" + reason + \")\").queue();\r\n                            EmbedBuilder embed = new EmbedBuilder();\r\n                            embed.setColor(Color.GREEN);\r\n                            embed.setDescription(\"**_\" + membertoban.getUser().getAsTag() + \" Was banned._**\");\r\n                            e.getChannel().sendMessage(embed.build()).queue();\r\n                            return;\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n            return;\r\n        } else if (args[0].equalsIgnoreCase(prefix + \"unban\")) {\r\n            if (!DiscordSRVUtils.Moderationconfig.isModeratorCommandsEnabled()) return;\r\n            if (DiscordSRVUtils.BotSettingsconfig.isBungee()) return;\r\n            boolean canuse = false;\r\n            for (Role role : e.getMember().getRoles()) {\r\n                if (DiscordSRVUtils.Moderationconfig.rolesAllowedToUseModeratorCommands().contains(role.getId())) {\r\n                    canuse = true;\r\n                }\r\n                if (DiscordSRVUtils.Moderationconfig.rolesAllowedToUseModeratorCommands().contains(role.getName())) {\r\n                    canuse = true;\r\n                }\r\n            }\r\n            if (!canuse) {\r\n                if (!e.getMember().hasPermission(Permission.MANAGE_SERVER)) {\r\n                    e.getChannel().sendMessage(\"You don't have permission to use this command.\").queue();\r\n                    return;\r\n                }\r\n            }\r\n            if (!(args.length >= 2)) {\r\n                e.getChannel().sendMessage(\"Who to unban? Usage: \" + prefix + \"unban <member>\").queue();\r\n                return;\r\n            } else {\r\n                try {\r\n                    Long.parseLong(args[1]);\r\n                    e.getGuild().retrieveBanById(args[1]).queue(success -> {\r\n                        Long membertounbanid = Long.parseLong(args[1]);\r\n                        e.getGuild().unban(membertounbanid.toString()).queue();\r\n                        EmbedBuilder embed = new EmbedBuilder();\r\n                        embed.setColor(Color.GREEN);\r\n                        embed.setDescription(\"**_\" + success.getUser().getAsTag() + \" Was Unbanned._**\");\r\n                        e.getChannel().sendMessage(embed.build()).queue();\r\n                    }, failure -> {\r\n                        e.getChannel().sendMessage(\"User is not banned.\").queue();\r\n\r\n                    });\r\n                } catch (NumberFormatException ex) {\r\n                    e.getChannel().sendMessage(\"member must be an id. Usage: \" + prefix + \"unban <member>\").queue();\r\n                    return;\r\n\r\n                }\r\n            }\r\n            return;\r\n        } else if (args[0].equalsIgnoreCase(prefix + \"mute\")) {\r\n            if (DiscordSRVUtils.BotSettingsconfig.isBungee()) return;\r\n            if (!DiscordSRVUtils.Moderationconfig.isModeratorCommandsEnabled()) return;\r\n            if (isModerator(e.getMember())) {\r\n                if (!(args.length >= 2)) {\r\n                    e.getChannel().sendMessage(\"Who to mute? Usage: \" + prefix + \"mute <member>\").queue();\r\n                    return;\r\n                } else if (args.length >= 2) {\r\n                    try {\r\n                        Long.parseLong(args[1]);\r\n                        Member membertomute = e.getGuild().getMemberById(Long.parseLong(args[1]));\r\n                        Role mutedrole = e.getGuild().getRoleById(DiscordSRVUtils.Moderationconfig.MutedRole());\r\n                        if (membertomute == null) {\r\n                            e.getChannel().sendMessage(\"Member not found.\").queue();\r\n                            return;\r\n                        }\r\n                        if (mutedrole == null) {\r\n                            e.getChannel().sendMessage(\"We could not mute this Member for some reason. If you are the owner please check server console\").queue();\r\n                            core.getLogger().severe(\"Role not found on Guild \\\"\" + e.getGuild().getName() + \"\\\" Role ID: \" + DiscordSRVUtils.Moderationconfig.MutedRole());\r\n                            return;\r\n                        } else if (e.getGuild().getSelfMember().canInteract(mutedrole)) {\r\n                            if (membertomute.getRoles().contains(mutedrole)) {\r\n                                EmbedBuilder embed = new EmbedBuilder();\r\n                                embed.setColor(Color.RED);\r\n                                embed.setDescription(\"**_Member is already muted._**\");\r\n                                e.getChannel().sendMessage(embed.build()).queue();\r\n                            } else {\r\n                                e.getGuild().addRoleToMember(membertomute, mutedrole).queue();\r\n                                EmbedBuilder embed = new EmbedBuilder();\r\n                                embed.setColor(Color.GREEN);\r\n                                embed.setDescription(\"**_\" + membertomute.getUser().getAsTag() + \" Was muted._**\");\r\n                                e.getChannel().sendMessage(embed.build()).queue();\r\n                            }\r\n                        } else {\r\n                            e.getChannel().sendMessage(\"I am unable to give the muted role. Please lower muted role. Or make mine higher\").queue();\r\n                            return;\r\n                        }\r\n                    } catch (NumberFormatException ex) {\r\n                        if (e.getMessage().getMentionedMembers().isEmpty()) {\r\n                            e.getChannel().sendMessage(\"Who to mute? Usage: \" + prefix + \"mute <member>\").queue();\r\n                            return;\r\n                        } else {\r\n                            Member membertomute = e.getMessage().getMentionedMembers().get(0);\r\n                            Role mutedrole = e.getGuild().getRoleById(DiscordSRVUtils.Moderationconfig.MutedRole());\r\n                            if (mutedrole == null) {\r\n                                e.getChannel().sendMessage(\"We could not mute this Member for some reason. If you are the owner please check server console\").queue();\r\n                                core.getLogger().severe(\"Role not found on Guild \\\"\" + e.getGuild().getName() + \"\\\" Role ID: \" + DiscordSRVUtils.Moderationconfig.MutedRole());\r\n                                return;\r\n                            } else {\r\n                                if (e.getGuild().getSelfMember().canInteract(mutedrole)) {\r\n                                    if (membertomute.getRoles().contains(mutedrole)) {\r\n                                        EmbedBuilder embed = new EmbedBuilder();\r\n                                        embed.setColor(Color.RED);\r\n                                        embed.setDescription(\"**_Member is already muted._**\");\r\n                                        e.getChannel().sendMessage(embed.build()).queue();\r\n                                    } else {\r\n                                        e.getGuild().addRoleToMember(membertomute, mutedrole).queue();\r\n                                        EmbedBuilder embed = new EmbedBuilder();\r\n                                        embed.setColor(Color.GREEN);\r\n                                        embed.setDescription(\"**_\" + membertomute.getUser().getAsTag() + \" Was muted._**\");\r\n                                        e.getChannel().sendMessage(embed.build()).queue();\r\n                                    }\r\n                                } else {\r\n                                    e.getChannel().sendMessage(\"I am unable to give the muted role. Please lower muted role. Or make mine higher\").queue();\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n            } else {\r\n                e.getChannel().sendMessage(\"You don't have perms to use this command.\").queue();\r\n            }\r\n            return;\r\n        } else if (args[0].equalsIgnoreCase(prefix + \"unmute\")) {\r\n            if (isModerator(e.getMember())) {\r\n                if (!(args.length >= 2)) {\r\n                    e.getChannel().sendMessage(\"Who to unmute? Usage: \" + prefix + \"mute <member>\").queue();\r\n                    return;\r\n                } else if (args.length >= 2) {\r\n                    try {\r\n                        Long.parseLong(args[1]);\r\n                        Member membertomute = e.getGuild().getMemberById(Long.parseLong(args[1]));\r\n                        Role mutedrole = e.getGuild().getRoleById(DiscordSRVUtils.Moderationconfig.MutedRole());\r\n                        if (membertomute == null) {\r\n                            e.getChannel().sendMessage(\"Member not found.\").queue();\r\n                            return;\r\n                        }\r\n                        if (mutedrole == null) {\r\n                            e.getChannel().sendMessage(\"We could not mute this Member for some reason. If you are the owner please check server console\").queue();\r\n                            core.getLogger().severe(\"Role not found on Guild \\\"\" + e.getGuild().getName() + \"\\\" Role ID: \" + DiscordSRVUtils.Moderationconfig.MutedRole());\r\n                            return;\r\n                        } else if (e.getGuild().getSelfMember().canInteract(mutedrole)) {\r\n                            if (!membertomute.getRoles().contains(mutedrole)) {\r\n                                EmbedBuilder embed = new EmbedBuilder();\r\n                                embed.setColor(Color.RED);\r\n                                embed.setDescription(\"**_Member is not muted._**\");\r\n                                e.getChannel().sendMessage(embed.build()).queue();\r\n                            } else {\r\n                                e.getGuild().removeRoleFromMember(membertomute, mutedrole).queue();\r\n                                EmbedBuilder embed = new EmbedBuilder();\r\n                                embed.setColor(Color.GREEN);\r\n                                embed.setDescription(\"**_\" + membertomute.getUser().getAsTag() + \" Was unmuted._**\");\r\n                                e.getChannel().sendMessage(embed.build()).queue();\r\n                            }\r\n                        } else {\r\n                            e.getChannel().sendMessage(\"I am unable to remove the muted role. Please lower muted role. Or make mine higher\").queue();\r\n                            return;\r\n                        }\r\n                    } catch (NumberFormatException ex) {\r\n                        if (e.getMessage().getMentionedMembers().isEmpty()) {\r\n                            e.getChannel().sendMessage(\"Who to unmute? Usage: \" + prefix + \"unmute <member>\").queue();\r\n                            return;\r\n                        } else {\r\n                            Member membertomute = e.getMessage().getMentionedMembers().get(0);\r\n                            Role mutedrole = e.getGuild().getRoleById(DiscordSRVUtils.Moderationconfig.MutedRole());\r\n                            if (mutedrole == null) {\r\n                                e.getChannel().sendMessage(\"We could not unmute this Member for some reason. If you are the owner please check server console\").queue();\r\n                                core.getLogger().severe(\"Role not found on Guild \\\"\" + e.getGuild().getName() + \"\\\" Role ID: \" + DiscordSRVUtils.Moderationconfig.MutedRole());\r\n                                return;\r\n                            } else {\r\n                                if (e.getGuild().getSelfMember().canInteract(mutedrole)) {\r\n                                    if (!membertomute.getRoles().contains(mutedrole)) {\r\n                                        EmbedBuilder embed = new EmbedBuilder();\r\n                                        embed.setColor(Color.RED);\r\n                                        embed.setDescription(\"**_Member is not muted._**\");\r\n                                        e.getChannel().sendMessage(embed.build()).queue();\r\n                                    } else {\r\n                                        e.getGuild().removeRoleFromMember(membertomute, mutedrole).queue();\r\n                                        EmbedBuilder embed = new EmbedBuilder();\r\n                                        embed.setColor(Color.GREEN);\r\n                                        embed.setDescription(\"**_\" + membertomute.getUser().getAsTag() + \" Was unmuted._**\");\r\n                                        e.getChannel().sendMessage(embed.build()).queue();\r\n                                    }\r\n                                } else {\r\n                                    e.getChannel().sendMessage(\"I am unable to remove the muted role. Please lower muted role. Or make mine higher\").queue();\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n            } else {\r\n                e.getChannel().sendMessage(\"You don't have perms to use this command.\").queue();\r\n            }\r\n            return;\r\n        } else if (args[0].equalsIgnoreCase(prefix + \"suggest\")) {\r\n            System.out.println(e.getMember().getIdLong());\r\n            System.out.println(e.getChannel().getIdLong());\r\n            if (DiscordSRVUtils.BotSettingsconfig.isBungee()) return;\r\n            if (!DiscordSRVUtils.SuggestionsConfig.isEnabled()) return;\r\n\r\n            try (Connection conn = core.getMemoryConnection()) {\r\n                PreparedStatement p1 = conn.prepareStatement(\"SELECT * FROM suggestions_Awaiting WHERE userid=? AND channel=?\");\r\n                p1.setLong(1, e.getMember().getIdLong());\r\n                p1.setLong(2, e.getChannel().getIdLong());\r\n                ResultSet r1 = p1.executeQuery();\r\n                if (!r1.next()) {\r\n                    PreparedStatement p2 = conn.prepareStatement(\"INSERT INTO suggestions_Awaiting (userid, channel, LastOutput) VALUES (?, ?, ?)\");\r\n                    p2.setLong(1, e.getMember().getIdLong());\r\n                    p2.setLong(2, e.getChannel().getIdLong());\r\n                    p2.setLong(3, System.currentTimeMillis());\r\n                    p2.execute();\r\n                    e.getChannel().sendMessage(\"Please enter your Suggestion.\").queue();\r\n                    return;\r\n                }\r\n            } catch (SQLException ex) {\r\n                ex.printStackTrace();\r\n            }\r\n        } else if (args[0].equalsIgnoreCase(prefix + \"leaderboard\")) {\r\n            if (DiscordSRVUtils.BotSettingsconfig.isBungee()) return;\r\n            if (!DiscordSRVUtils.Levelingconfig.Leveling_Enabled()) return;\r\n            Stopwatch stopwatch = new TimerManager().getStopwatch();\r\n            stopwatch.start();\r\n            LeaderBoardManager manager = core.getLeaderBoardManager();\r\n            int count = 0;\r\n            EmbedBuilder embed = new EmbedBuilder();\r\n            embed.setTitle(\"Leaderboard\");\r\n            String description = \"\";\r\n            embed.setColor(Color.ORANGE);\r\n            for (Person currentPerson : manager.getLeaderBoardFromTo(1, 10)) {\r\n                count++;\r\n                if (description.equals(\"\")) {\r\n                    description = \"**\" + count + \".**\" + DiscordSRVUtils.Levelingconfig.leaderboard_format()\r\n                            .replace(\"[Minecraft_Name]\", Bukkit.getOfflinePlayer(currentPerson.getMinecraftUUID()).getName())\r\n                            .replace(\"[Level]\", Integer.toString(currentPerson.getLevel()))\r\n                            .replace(\"[TotalMessages]\", currentPerson.getTotalMessages().toString())\r\n                            .replace(\"[DiscordMessages]\", currentPerson.getDiscordMessages().toString())\r\n                            .replace(\"[MinecraftMessages]\", currentPerson.getMinecraftMessages().toString())\r\n                            .replace(\"[XP]\", Integer.toString(currentPerson.getXP()))\r\n\r\n                    ;\r\n                } else {\r\n                    description = description + \"\\n\" + \"**\" + count + \".**\" + DiscordSRVUtils.Levelingconfig.leaderboard_format()\r\n                            .replace(\"[Minecraft_Name]\", Bukkit.getOfflinePlayer(currentPerson.getMinecraftUUID()).getName())\r\n                            .replace(\"[Level]\", Integer.toString(currentPerson.getLevel()))\r\n                            .replace(\"[TotalMessages]\", currentPerson.getTotalMessages().toString())\r\n                            .replace(\"[DiscordMessages]\", currentPerson.getDiscordMessages().toString())\r\n                            .replace(\"[MinecraftMessages]\", currentPerson.getMinecraftMessages().toString())\r\n                            .replace(\"[XP]\", Integer.toString(currentPerson.getXP()))\r\n                    ;\r\n                }\r\n            }\r\n            embed.setDescription(description);\r\n            e.getChannel().sendMessage(embed.build()).queue();\r\n            System.out.println(stopwatch.getElapsedTime() + \"ms\");\r\n        } else if (args[0].equalsIgnoreCase(prefix + \"suggestionreply\") || args[0].equalsIgnoreCase(prefix + \"sr\")) {\r\n            if (!DiscordSRVUtils.SuggestionsConfig.isEnabled()) return;\r\n            if (DiscordSRVUtils.BotSettingsconfig.isBungee()) return;\r\n            if (!isModerator(e.getMember())) {\r\n                e.getChannel().sendMessage(\"You don't have permission to use this command\").queue();\r\n                return;\r\n            }\r\n            if (!(args.length >= 2)) {\r\n                e.getChannel().sendMessage(\"**Usage: **\" + prefix + \"sr <Suggestion Message ID>\").queue();\r\n            } else {\r\n                try (Connection conn = core.getMemoryConnection(); Connection conn2 = core.getDatabaseFile()) {\r\n                    PreparedStatement pcheck1 = conn.prepareStatement(\"SELECT * FROM srmsgesreply WHERE userid=? AND Channel=?\");\r\n                    pcheck1.setLong(1, e.getMember().getIdLong());\r\n                    pcheck1.setLong(2, e.getChannel().getIdLong());\r\n                    ResultSet rcheck1 = pcheck1.executeQuery();\r\n                    if (rcheck1.next()) return;\r\n                    if (!isNumberic(args[1])) {\r\n                        e.getChannel().sendMessage(\"Invalid ID, Please try Again\").queue();\r\n                        return;\r\n                    }\r\n                    PreparedStatement pcheck2 = conn2.prepareStatement(\"SELECT * FROM discordsrvutils_suggestions WHERE Message=?\");\r\n                    pcheck2.setLong(1, Long.parseLong(args[1]));\r\n                    ResultSet rcheck2 = pcheck2.executeQuery();\r\n                    if (rcheck2.next()) {\r\n                        if (!(rcheck2.getString(\"isAccepted\") == null)) {\r\n                            e.getChannel().sendMessage(\"This suggestion has been already Accepted/denied\").queue();\r\n                            return;\r\n                        }\r\n                    } else {\r\n                        e.getChannel().sendMessage(\"Suggestion not found.\").queue();\r\n                        return;\r\n                    }\r\n                } catch (SQLException ex) {\r\n                    ex.printStackTrace();\r\n                }\r\n                EmbedBuilder embed = new EmbedBuilder();\r\n                embed.setColor(Color.CYAN);\r\n                embed.setDescription(\"Is this suggestion accepted?\\n:regional_indicator_y: YES\\n\\n :regional_indicator_n: NO\");\r\n                embed.setTitle(\"Reply a suggestion\");\r\n                e.getChannel().sendMessage(embed.build()).queue(msg -> {\r\n                    try (Connection conn = core.getMemoryConnection()) {\r\n                        PreparedStatement p1 = conn.prepareStatement(\"INSERT INTO srmsgesreply (userid, Channel, SuggestionID, step, Awaiting_isAccepted, LastOutput) VALUES (?, ?, ?, 1, ?, ?)\");\r\n                        p1.setLong(1, e.getMember().getIdLong());\r\n                        p1.setLong(2, e.getChannel().getIdLong());\r\n                        p1.setLong(3, Long.parseLong(args[1]));\r\n                        p1.setLong(4, msg.getIdLong());\r\n                        p1.setLong(5, System.currentTimeMillis());\r\n                        p1.execute();\r\n                        msg.addReaction(\"\\uD83C\\uDDFE\").queue();\r\n                        msg.addReaction(\"\\uD83C\\uDDF3\").queue();\r\n\r\n                    } catch (SQLException ex) {\r\n                        ex.printStackTrace();\r\n                    }\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        try (Connection conn = core.getMemoryConnection(); Connection fconn = core.getDatabaseFile()) {\r\n            PreparedStatement pp1 = conn.prepareStatement(\"SELECT * FROM srmsgesreply WHERE userid=? AND Channel=?\");\r\n            pp1.setLong(1, e.getMember().getIdLong());\r\n            pp1.setLong(2, e.getChannel().getIdLong());\r\n            ResultSet rr1 = pp1.executeQuery();\r\n            if (rr1.next()) {\r\n                if (rr1.getInt(\"step\") == 2) {\r\n                    PreparedStatement pp2 = fconn.prepareStatement(\"UPDATE discordsrvutils_suggestions SET isAccepted=?, staffReply=?, staffReplier=? WHERE Message=?\");\r\n                    pp2.setString(1, rr1.getString(\"isAccepted\"));\r\n                    pp2.setString(2, e.getMessage().getContentRaw());\r\n                    pp2.setLong(3, e.getMember().getIdLong());\r\n                    pp2.setLong(4, rr1.getLong(\"SuggestionID\"));\r\n                    pp2.execute();\r\n                    PreparedStatement pp3 = fconn.prepareStatement(\"SELECT * FROM discordsrvutils_suggestions WHERE Message=?\");\r\n                    pp3.setLong(1, rr1.getLong(\"SuggestionID\"));\r\n                    ResultSet rr2 = pp3.executeQuery();\r\n                    rr2.next();\r\n                    String isAccepted = rr1.getString(\"isAccepted\");\r\n                    int SID = rr2.getInt(\"Number\");\r\n                    String msgcontent = rr2.getString(\"Suggestion\");\r\n                    String msg = rr2.getLong(\"Message\") + \"\";\r\n                    String channel = rr2.getLong(\"Channel\") + \"\";\r\n                    String url = \"https://discord.com/channels/\" + e.getGuild().getId() + \"/\" + rr2.getLong(\"Channel\") + \"/\" + rr2.getLong(\"Message\");\r\n                    e.getJDA().retrieveUserById(rr2.getLong(\"Userid\")).queue(user -> {\r\n                        if (DiscordSRVUtils.SuggestionsConfig.sendDMToUserWhenSuggestionReplied()) {\r\n                            user.openPrivateChannel().queue(ch -> {\r\n                                EmbedBuilder embed = new EmbedBuilder();\r\n                                if (isAccepted.equals(\"true\")) {\r\n                                    embed.setTitle(\"Suggestion Accepted\");\r\n                                    embed.setColor(Color.GREEN);\r\n                                } else {\r\n                                    embed.setTitle(\"Suggestion denied\");\r\n                                    embed.setColor(Color.RED);\r\n                                }\r\n                                embed.addField(\"Suggestion\", \"[Jump!](\" + url + \")\", true);\r\n                                embed.addField(\"Replied by\", e.getMember().getUser().getAsTag(), true);\r\n                                embed.addField(\"Reply\", e.getMessage().getContentRaw(), false);\r\n\r\n                                ch.sendMessage(embed.build()).queue();\r\n\r\n                            });\r\n                        }\r\n                        EmbedBuilder embed = new EmbedBuilder();\r\n                        embed.setThumbnail(user.getEffectiveAvatarUrl());\r\n                        embed.setDescription(\"**Suggested by:** \" + user.getAsTag() + \"\\n\" +\r\n                                \"**Suggestion Number:** #\" + SID);\r\n                        embed.addField(\"Suggestion\", msgcontent, false);\r\n                        embed.setColor(Color.YELLOW);\r\n                        embed.addField(\"Replied by\", e.getMember().getUser().getAsTag(), false);\r\n                        if (isAccepted.equals(\"true\")) {\r\n                            embed.addField(\"Accepted\", \"Yes\", true);\r\n                        } else {\r\n                            embed.addField(\"Accepted\", \"No\", true);\r\n                        }\r\n                        embed.addField(\"Reply\", e.getMessage().getContentRaw(), false);\r\n                        e.getGuild().getTextChannelById(channel).editMessageById(Long.parseLong(msg), embed.build()).queue();\r\n                        e.getChannel().sendMessage(\"Successfully replied.\").queue();\r\n                        try (Connection conni = core.getMemoryConnection()) {\r\n                            PreparedStatement pppppp1 = conni.prepareStatement(\"DELETE FROM srmsgesreply WHERE userid=? AND Channel=?\");\r\n                            pppppp1.setLong(1, e.getMember().getIdLong());\r\n                            pppppp1.setLong(2, e.getChannel().getIdLong());\r\n                            pppppp1.execute();\r\n                        } catch (SQLException ex) {\r\n                            ex.printStackTrace();\r\n                        }\r\n                    });\r\n\r\n                }\r\n            }\r\n            try (PreparedStatement p1 = conn.prepareStatement(\"SELECT * FROM tickets_creating WHERE UserID=? AND Channel_id=?\")) {\r\n                p1.setLong(1, e.getMember().getIdLong());\r\n                p1.setLong(2, e.getChannel().getIdLong());\r\n                p1.execute();\r\n                try (ResultSet r1 = p1.executeQuery()) {\r\n                    if (r1.next()) {\r\n                        if (e.getMessage().getContentRaw().equalsIgnoreCase(\"cancel\")) {\r\n                            e.getChannel().sendMessage(\"Cancelled\").queue();\r\n                            PreparedStatement last = conn.prepareStatement(\"DELETE FROM tickets_creating WHERE Channel_id=? AND UserID=?\");\r\n                            last.setLong(1, e.getChannel().getIdLong());\r\n                            last.setLong(2, e.getMember().getIdLong());\r\n                            last.execute();\r\n                            return;\r\n\r\n                        }\r\n                        if (r1.getInt(\"step\") == 0) {\r\n                            try (PreparedStatement p2 = conn.prepareStatement(\"UPDATE tickets_creating SET step=1, Name=? WHERE UserID=? AND Channel_id=?\")) {\r\n                                p2.setString(1, e.getMessage().getContentRaw());\r\n                                p2.setLong(2, e.getMember().getIdLong());\r\n                                p2.setLong(3, e.getChannel().getIdLong());\r\n                                p2.execute();\r\n                                EmbedBuilder embed = new EmbedBuilder();\r\n                                embed.setTitle(\"Create new ticket\");\r\n                                embed.setDescription(\"**Step 2:** Please send the ID of the Category that opened tickets are created on\\n\\n To cancel this process, reply with `cancel`\");\r\n                                embed.setColor(Color.RED);\r\n                                e.getChannel().sendMessage(embed.build()).queue();\r\n                            }\r\n                        } else if (r1.getInt(\"step\") == 1) {\r\n                            try {\r\n                                Long.parseLong(e.getMessage().getContentRaw());\r\n                                if (e.getJDA().getCategoryById(e.getMessage().getContentRaw()) == null) {\r\n                                    e.getChannel().sendMessage(\"Category not found on any server. Please try again.\").queue();\r\n                                } else {\r\n                                    PreparedStatement p2 = conn.prepareStatement(\"UPDATE tickets_creating SET Opened_Category=?, STEP=2 WHERE Channel_Id=? AND UserID=?\");\r\n                                    p2.setLong(1, Long.parseLong(e.getMessage().getContentRaw()));\r\n                                    p2.setLong(2, e.getChannel().getIdLong());\r\n                                    p2.setLong(3, e.getMember().getIdLong());\r\n                                    p2.execute();\r\n                                    EmbedBuilder embed = new EmbedBuilder();\r\n                                    embed.setTitle(\"Create new ticket\");\r\n                                    embed.setDescription(\"**Step 3:** Please send the ID of the category that Closed tickets should be moved to.\\n\\n To cancel this process, reply with `cancel`\");\r\n                                    embed.setColor(Color.RED);\r\n                                    e.getChannel().sendMessage(embed.build()).queue();\r\n                                }\r\n                            } catch (NumberFormatException ex) {\r\n                                e.getChannel().sendMessage(\"Not even a valid number. Please try again.\").queue();\r\n                            } catch (IllegalStateException ex) {\r\n                                e.getChannel().sendMessage(\"sadly\").queue();\r\n                            }\r\n\r\n                        } else if (r1.getInt(\"step\") == 2) {\r\n                            try {\r\n                                Long.parseLong(e.getMessage().getContentRaw());\r\n                                if (e.getJDA().getCategoryById(e.getMessage().getContentRaw()) == null) {\r\n                                    e.getChannel().sendMessage(\"Category not found on any server. Please try again.\").queue();\r\n                                } else {\r\n                                    PreparedStatement p2 = conn.prepareStatement(\"UPDATE tickets_creating SET Closed_Category=?, STEP=3 WHERE Channel_Id=? AND UserID=?\");\r\n                                    p2.setLong(1, Long.parseLong(e.getMessage().getContentRaw()));\r\n                                    p2.setLong(2, e.getChannel().getIdLong());\r\n                                    p2.setLong(3, e.getMember().getIdLong());\r\n                                    p2.execute();\r\n                                    EmbedBuilder embed = new EmbedBuilder();\r\n                                    embed.setTitle(\"Create new ticket\");\r\n                                    embed.setDescription(\"**Step 4:** Please mention the roles that will be allowed to view all tickets.\\n\\n To cancel this process, reply with `cancel`\\n\\nReply with `none` for no roles.\");\r\n                                    embed.setColor(Color.RED);\r\n                                    e.getChannel().sendMessage(embed.build()).queue(message -> {\r\n                                    });\r\n                                }\r\n                            } catch (NumberFormatException ex) {\r\n                                e.getChannel().sendMessage(\"Not even a valid number. Please try again.\").queue();\r\n                            } catch (IllegalStateException ex) {\r\n                                e.getChannel().sendMessage(\"sadly\").queue();\r\n                            }\r\n\r\n\r\n                        } else if (r1.getInt(\"step\") == 3) {\r\n                            if (!e.getMessage().getMentionedRoles().isEmpty()) {\r\n                                for (Role role : e.getMessage().getMentionedRoles()) {\r\n                                    try (PreparedStatement p2 = conn.prepareStatement(\"SELECT * FROM discordsrvutils_ticket_allowed_roles WHERE Channel_id=? AND UserID=?\")) {\r\n                                        p2.setLong(1, e.getChannel().getIdLong());\r\n                                        p2.setLong(2, e.getMember().getIdLong());\r\n                                        p2.execute();\r\n                                        try (ResultSet r2 = p2.executeQuery()) {\r\n                                            try (PreparedStatement p3 = conn.prepareStatement(\"INSERT INTO discordsrvutils_ticket_allowed_roles (Channel_id, UserID, RoleID) VALUES (?,?,?)\")) {\r\n                                                p3.setLong(1, e.getChannel().getIdLong());\r\n                                                p3.setLong(2, e.getMember().getIdLong());\r\n                                                p3.setLong(3, role.getIdLong());\r\n                                                p3.execute();\r\n\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                PreparedStatement p2 = conn.prepareStatement(\"UPDATE tickets_creating SET step=4 WHERE channel_id=? AND UserID=?\");\r\n                                p2.setLong(1, e.getChannel().getIdLong());\r\n                                p2.setLong(2, e.getMember().getIdLong());\r\n                                p2.execute();\r\n                                EmbedBuilder embed = new EmbedBuilder();\r\n                                embed.setColor(Color.RED);\r\n                                embed.setTitle(\"Create new ticket\");\r\n                                embed.setDescription(\"**Step 5:** Please mention the channel which we should send the ticket creation message.\\n\\n To cancel this process, reply with `cancel`\");\r\n                                e.getChannel().sendMessage(embed.build()).queue();\r\n                            } else {\r\n                                if (!e.getMessage().getContentRaw().equalsIgnoreCase(\"none\")) {\r\n                                    e.getChannel().sendMessage(\"No roles mentioned. Please try again\").queue();\r\n                                } else {\r\n                                    PreparedStatement p2 = conn.prepareStatement(\"UPDATE tickets_creating SET step=4 WHERE channel_id=? AND UserID=?\");\r\n                                    p2.setLong(1, e.getChannel().getIdLong());\r\n                                    p2.setLong(2, e.getMember().getIdLong());\r\n                                    p2.execute();\r\n                                    EmbedBuilder embed = new EmbedBuilder();\r\n                                    embed.setColor(Color.RED);\r\n                                    embed.setTitle(\"Create new ticket\");\r\n                                    embed.setDescription(\"**Step 5:** Please mention the channel which we should send the ticket creation message.\\n\\n To cancel this process, reply with `cancel`\");\r\n                                    e.getChannel().sendMessage(embed.build()).queue();\r\n\r\n                                }\r\n                            }\r\n                        } else if (r1.getInt(\"step\") == 4) {\r\n                            if (e.getMessage().getMentionedChannels().isEmpty()) {\r\n                                e.getChannel().sendMessage(\"No Channels mentioned. Please try again\").queue();\r\n                                return;\r\n                            } else {\r\n                                int number = 0;\r\n                                for (TextChannel tx : e.getMessage().getMentionedChannels()) {\r\n                                    number = number + 1;\r\n                                }\r\n                                if (number >= 2) {\r\n                                    e.getChannel().sendMessage(\"You mentioned more than 1 channel. Please try again\").queue();\r\n                                } else {\r\n                                    PreparedStatement p2 = conn.prepareStatement(\"SELECT * FROM tickets_creating WHERE UserID=? AND Channel_id=?\");\r\n                                    p2.setLong(1, e.getMember().getIdLong());\r\n                                    p2.setLong(2, e.getChannel().getIdLong());\r\n                                    p2.execute();\r\n                                    ResultSet r2 = p2.executeQuery();\r\n                                    r2.next();\r\n                                    EmbedBuilder embed = new EmbedBuilder();\r\n                                    embed.setTitle(r2.getString(\"Name\"));\r\n                                    embed.setDescription(\"React with \\uD83D\\uDCE9 to create a ticket.\");\r\n                                    embed.setColor(Color.CYAN);\r\n\r\n                                    try (Connection mconn = core.getMemoryConnection();) {\r\n\r\n                                        PreparedStatement mp1 = mconn.prepareStatement(\"SELECT * FROM tickets_creating WHERE UserID=? AND Channel_id=?\");\r\n                                        mp1.setLong(1, e.getMember().getIdLong());\r\n                                        mp1.setLong(2, e.getChannel().getIdLong());\r\n                                        mp1.execute();\r\n                                        ResultSet mr1 = mp1.executeQuery();\r\n                                        mr1.next();\r\n                                        int TicketID = RANDOM.nextInt(9999);\r\n                                        PreparedStatement mp2 = mconn.prepareStatement(\"SELECT * FROM discordsrvutils_ticket_allowed_roles WHERE Channel_id=? AND UserID=?\");\r\n                                        mp2.setLong(1, e.getChannel().getIdLong());\r\n                                        mp2.setLong(2, e.getMember().getIdLong());\r\n                                        mp2.execute();\r\n                                        ResultSet mr2 = mp2.executeQuery();\r\n                                        List<Long> roles = new ArrayList<>();\r\n                                        while (mr2.next()) {\r\n                                            roles.add(mr2.getLong(\"RoleID\"));\r\n\r\n                                        }\r\n                                        tickets.createTicket(TicketID, e.getMessage().getMentionedChannels().get(0), mr1.getLong(\"Opened_Category\"), mr1.getLong(\"Closed_Category\"), mr1.getString(\"Name\"), roles);\r\n                                        tickets.deleteMemoryTicketCreation(e.getChannel().getIdLong(), e.getMember().getIdLong());\r\n\r\n                                    } catch (SQLException exception) {\r\n                                        exception.printStackTrace();\r\n                                    }\r\n\r\n                                    e.getChannel().sendMessage(\"Ticket sent in \" + e.getMessage().getMentionedChannels().get(0).getAsMention()).queue();\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        PreparedStatement p2 = conn.prepareStatement(\"SELECT * FROM discordsrvutils_Awaiting_Edits WHERE Channel_id=? AND UserID=?\");\r\n                        p2.setLong(1, e.getChannel().getIdLong());\r\n                        p2.setLong(2, e.getMember().getIdLong());\r\n                        p2.execute();\r\n                        ResultSet r2 = p2.executeQuery();\r\n                        if (r2.next()) {\r\n                            if (e.getMessage().getContentRaw().equalsIgnoreCase(\"cancel\")) {\r\n                                PreparedStatement p3 = conn.prepareStatement(\"DELETE FROM discordsrvutils_Awaiting_Edits WHERE Channel_id=? AND UserID=?\");\r\n                                p3.setLong(1, e.getChannel().getIdLong());\r\n                                p3.setLong(2, e.getMember().getIdLong());\r\n                                p3.execute();\r\n                                e.getChannel().sendMessage(\"Cancelled.\").queue();\r\n                            }\r\n\r\n                            if (r2.getInt(\"Type\") != 0) {\r\n                                if (r2.getInt(\"Type\") == 1) {\r\n\r\n                                    PreparedStatement p3 = fconn.prepareStatement(\"UPDATE discordsrvutils_tickets SET Name=? WHERE TicketID=?\");\r\n                                    p3.setString(1, e.getMessage().getContentRaw());\r\n                                    p3.setInt(2, r2.getInt(\"TicketID\"));\r\n                                    p3.execute();\r\n                                    EmbedBuilder embed = new EmbedBuilder();\r\n                                    embed.setTitle(e.getMessage().getContentRaw());\r\n                                    embed.setDescription(\"React with \\uD83D\\uDCE9 to create a ticket.\");\r\n                                    embed.setColor(Color.CYAN);\r\n                                    PreparedStatement getter = fconn.prepareStatement(\"SELECT * FROM discordsrvutils_tickets WHERE TicketID=?\");\r\n                                    getter.setInt(1, r2.getInt(\"TicketID\"));\r\n                                    getter.execute();\r\n                                    ResultSet rgetter = getter.executeQuery();\r\n                                    rgetter.next();\r\n                                    e.getGuild().getTextChannelById(rgetter.getLong(\"ChannelID\")).editMessageById(rgetter.getLong(\"MessageID\"), embed.build()).queue();\r\n                                    PreparedStatement p4 = conn.prepareStatement(\"DELETE FROM discordsrvutils_Awaiting_Edits WHERE Channel_id=? AND UserID=?\");\r\n                                    p4.setLong(1, e.getChannel().getIdLong());\r\n                                    p4.setLong(2, e.getMember().getIdLong());\r\n                                    p4.execute();\r\n                                    e.getChannel().sendMessage(\"Ticket renamed.\").queue();\r\n                                } else if (r2.getInt(\"Type\") == 3) {\r\n                                    try {\r\n                                        if (e.getJDA().getCategoryById(Long.parseLong(e.getMessage().getContentRaw())) == null) {\r\n                                            e.getChannel().sendMessage(\"Category was not found.\").queue();\r\n                                        }\r\n                                        PreparedStatement p3 = fconn.prepareStatement(\"UPDATE discordsrvutils_tickets SET Closed_Category=? WHERE TicketID=?\");\r\n                                        p3.setLong(1, Long.parseLong(e.getMessage().getContentRaw()));\r\n                                        p3.setInt(2, r2.getInt(\"TicketID\"));\r\n                                        p3.execute();\r\n                                        PreparedStatement p4 = conn.prepareStatement(\"DELETE FROM discordsrvutils_Awaiting_Edits WHERE Channel_id=? AND UserID=?\");\r\n                                        p4.setLong(1, e.getChannel().getIdLong());\r\n                                        p4.setLong(2, e.getMember().getIdLong());\r\n                                        p4.execute();\r\n                                        e.getChannel().sendMessage(\"Changed Closed category.\").queue();\r\n\r\n                                    } catch (NumberFormatException ex) {\r\n                                        e.getChannel().sendMessage(\"Not even a valid ID. Try again\").queue();\r\n                                    }\r\n                                } else if (r2.getInt(\"Type\") == 2) {\r\n                                    try {\r\n                                        if (e.getJDA().getCategoryById(Long.parseLong(e.getMessage().getContentRaw())) == null) {\r\n                                            e.getChannel().sendMessage(\"Category was not found.\").queue();\r\n                                        }\r\n                                        PreparedStatement p3 = fconn.prepareStatement(\"UPDATE discordsrvutils_tickets SET Opened_Category=? WHERE TicketID=?\");\r\n                                        p3.setLong(1, Long.parseLong(e.getMessage().getContentRaw()));\r\n                                        p3.setInt(2, r2.getInt(\"TicketID\"));\r\n                                        p3.execute();\r\n                                        PreparedStatement p4 = conn.prepareStatement(\"DELETE FROM discordsrvutils_Awaiting_Edits WHERE Channel_id=? AND UserID=?\");\r\n                                        p4.setLong(1, e.getChannel().getIdLong());\r\n                                        p4.setLong(2, e.getMember().getIdLong());\r\n                                        p4.execute();\r\n                                        e.getChannel().sendMessage(\"Changed Opened category.\").queue();\r\n\r\n                                    } catch (NumberFormatException ex) {\r\n                                        e.getChannel().sendMessage(\"Not even a valid ID. Try again\").queue();\r\n                                    }\r\n\r\n                                } else if (r2.getInt(\"Type\") == 4) {\r\n                                    if (e.getMessage().getMentionedRoles().isEmpty()) {\r\n                                        if (e.getMessage().getContentRaw().equalsIgnoreCase(\"none\")) {\r\n                                            PreparedStatement p3 = fconn.prepareStatement(\"DELETE FROM discordsrvutils_ticket_allowed_roles WHERE TicketID=?\");\r\n                                            p3.setInt(1, r2.getInt(\"TicketID\"));\r\n                                            p3.execute();\r\n                                            PreparedStatement p5 = conn.prepareStatement(\"DELETE FROM discordsrvutils_Awaiting_Edits WHERE Channel_id=? AND UserID=?\");\r\n                                            p5.setLong(1, e.getChannel().getIdLong());\r\n                                            p5.setLong(2, e.getMember().getIdLong());\r\n                                            p5.execute();\r\n                                            e.getChannel().sendMessage(\"Changed ticket view allowed roles.\").queue();\r\n                                        } else {\r\n                                            e.getChannel().sendMessage(\"No roles mentioned. Please try again\").queue();\r\n                                        }\r\n                                    } else {\r\n                                        PreparedStatement p3 = fconn.prepareStatement(\"DELETE FROM discordsrvutils_ticket_allowed_roles WHERE TicketID=?\");\r\n                                        p3.setInt(1, r2.getInt(\"TicketID\"));\r\n                                        p3.execute();\r\n                                        for (Role role : e.getMessage().getMentionedRoles()) {\r\n                                            PreparedStatement p4 = fconn.prepareStatement(\"INSERT INTO discordsrvutils_ticket_allowed_roles (TicketID, RoleID) VALUES (?, ?)\");\r\n                                            p4.setInt(1, r2.getInt(\"TicketID\"));\r\n                                            p4.setLong(2, role.getIdLong());\r\n                                            p4.execute();\r\n                                            PreparedStatement p5 = conn.prepareStatement(\"DELETE FROM discordsrvutils_Awaiting_Edits WHERE Channel_id=? AND UserID=?\");\r\n                                            p5.setLong(1, e.getChannel().getIdLong());\r\n                                            p5.setLong(2, e.getMember().getIdLong());\r\n                                            p5.execute();\r\n                                            e.getChannel().sendMessage(\"Changed ticket view allowed roles.\").queue();\r\n                                        }\r\n\r\n                                    }\r\n                                } else if (r2.getInt(\"Type\") == 5) {\r\n                                    if (e.getMessage().getMentionedChannels().isEmpty()) {\r\n                                        e.getChannel().sendMessage(\"No channels mentioned. Please try again\").queue();\r\n                                    } else {\r\n                                        PreparedStatement p3 = fconn.prepareStatement(\"SELECT * FROM discordsrvutils_ticket_allowed_roles WHERE TicketID=?\");\r\n                                        p3.setInt(1, r2.getInt(\"TicketID\"));\r\n                                        p3.execute();\r\n                                        ResultSet r3 = p3.executeQuery();\r\n                                        r3.next();\r\n                                        PreparedStatement something = fconn.prepareStatement(\"SELECT * FROM discordsrvutils_tickets WHERE TicketID=?\");\r\n                                        something.setInt(1, r2.getInt(\"TicketID\"));\r\n                                        something.execute();\r\n                                        ResultSet rsomething = something.executeQuery();\r\n                                        rsomething.next();\r\n                                        e.getGuild().getTextChannelById(rsomething.getLong(\"ChannelID\")).deleteMessageById(rsomething.getLong(\"MessageID\")).queue();\r\n                                        EmbedBuilder embed = new EmbedBuilder();\r\n                                        PreparedStatement p5 = fconn.prepareStatement(\"SELECT * FROM discordsrvutils_tickets WHERE TicketID=?\");\r\n                                        p5.setInt(1, r2.getInt(\"TicketID\"));\r\n                                        p5.execute();\r\n                                        ResultSet r5 = p5.executeQuery();\r\n                                        r5.next();\r\n                                        embed.setTitle(r5.getString(\"Name\"));\r\n                                        embed.setDescription(\"React with \\uD83D\\uDCE9 to create a ticket.\");\r\n                                        embed.setColor(Color.CYAN);\r\n                                        e.getGuild().getTextChannelById(e.getMessage().getMentionedChannels().get(0).getIdLong()).sendMessage(embed.build()).queue(msg -> {\r\n                                            try (Connection fconn2 = core.getDatabaseFile()) {\r\n                                                Connection conn3 = core.getMemoryConnection();\r\n                                                PreparedStatement mp2 = conn3.prepareStatement(\"SELECT * FROM discordsrvutils_Awaiting_Edits WHERE Channel_id=? AND UserID=?\");\r\n                                                mp2.setLong(1, e.getChannel().getIdLong());\r\n                                                mp2.setLong(2, e.getMember().getIdLong());\r\n                                                mp2.execute();\r\n                                                ResultSet mr2 = mp2.executeQuery();\r\n                                                mr2.next();\r\n                                                ;\r\n                                                PreparedStatement p6 = fconn2.prepareStatement(\"UPDATE discordsrvutils_tickets SET ChannelID=?, MessageID=? WHERE TicketID=?\");\r\n                                                p6.setLong(1, e.getMessage().getMentionedChannels().get(0).getIdLong());\r\n                                                p6.setLong(2, msg.getIdLong());\r\n                                                p6.setInt(3, mr2.getInt(\"TicketID\"));\r\n                                                p6.execute();\r\n                                                msg.addReaction(\"\\uD83D\\uDCE9\").queue();\r\n                                                PreparedStatement p7 = conn3.prepareStatement(\"DELETE FROM discordsrvutils_Awaiting_Edits WHERE Channel_id=? AND UserID=?\");\r\n                                                p7.setLong(1, e.getChannel().getIdLong());\r\n                                                p7.setLong(2, e.getMember().getIdLong());\r\n                                                p7.execute();\r\n                                                e.getChannel().sendMessage(\"Ticket channel changed.\").queue();\r\n\r\n\r\n                                            } catch (SQLException ex) {\r\n                                                ex.printStackTrace();\r\n                                            }\r\n                                        });\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            PreparedStatement p3 = conn.prepareStatement(\"SELECT * FROM suggestions_Awaiting WHERE userid=? AND Channel=?\");\r\n                            p3.setLong(1, e.getMember().getIdLong());\r\n                            p3.setLong(2, e.getChannel().getIdLong());\r\n                            ResultSet r3 = p3.executeQuery();\r\n                            if (r3.next()) {\r\n                                TextChannel channel = e.getGuild().getTextChannelById(DiscordSRVUtils.SuggestionsConfig.channel());\r\n                                if (channel == null) {\r\n                                    e.getChannel().sendMessage(\"You are unable to suggest at the moment. If you are the owner, check console for details.\").queue();\r\n                                    core.getLogger().severe(\"Suggestions channel in the config was not found.\");\r\n                                    try (Connection c2 = core.getMemoryConnection()) {\r\n                                        PreparedStatement p6 = c2.prepareStatement(\"DELETE FROM suggestions_Awaiting WHERE userid=? AND Channel=?\");\r\n                                        p6.setLong(1, e.getMember().getIdLong());\r\n                                        p6.setLong(2, e.getChannel().getIdLong());\r\n                                        p6.execute();\r\n                                    } catch (SQLException ex) {\r\n                                        ex.printStackTrace();\r\n                                    }\r\n\r\n                                    return;\r\n                                } else {\r\n                                    int ID;\r\n                                    try (Connection cc = core.getDatabaseFile()) {\r\n                                        PreparedStatement p4 = cc.prepareStatement(\"SELECT * FROM discordsrvutils_suggestions ORDER BY Number DESC\");\r\n                                        ResultSet r4 = p4.executeQuery();\r\n                                        if (r4.next()) {\r\n                                            ID = r4.getInt(\"Number\") + 1;\r\n                                        } else {\r\n                                            ID = 1;\r\n                                        }\r\n                                        EmbedBuilder embed = new EmbedBuilder();\r\n                                        embed.setColor(Color.ORANGE);\r\n                                        embed.setThumbnail(e.getMember().getUser().getEffectiveAvatarUrl());\r\n                                        embed.setDescription(\"**Suggested by:** \" + e.getMember().getUser().getAsTag() + \"\\n\" +\r\n                                                \"**Suggestion Number:** #\" + ID);\r\n                                        embed.addField(\"Suggestion\", e.getMessage().getContentRaw(), false);\r\n                                        channel.sendMessage(embed.build()).queue(msg -> {\r\n                                            try (Connection c1 = core.getDatabaseFile(); Connection c2 = core.getMemoryConnection()) {\r\n                                                String emote_yes = DiscordSRVUtils.SuggestionsConfig.emoji_yes();\r\n                                                String emote_no = DiscordSRVUtils.SuggestionsConfig.emoji_no();\r\n                                                String yesparsed = EmojiParser.parseToUnicode(\":\" + emote_yes + \":\");\r\n                                                if (!yesparsed.equals(\":\" + emote_yes + \":\")) {\r\n                                                    emote_yes = yesparsed;\r\n                                                } else {\r\n                                                    List<Emote> emotes = e.getGuild().getEmotesByName(emote_yes, true);\r\n                                                    if (emotes.isEmpty()) {\r\n                                                        emote_yes = \"✅\";\r\n                                                    } else {\r\n                                                        Emote emote = emotes.get(0);\r\n                                                        emote_yes = \"a:\" + emote.getName() + \":\" + emote.getId();\r\n                                                    }\r\n                                                }\r\n                                                String noparesed = \":\" + emote_no + \":\";\r\n                                                if (!noparesed.equals(\":\" + emote_no + \":\")) {\r\n                                                    emote_no = noparesed;\r\n                                                } else {\r\n                                                    List<Emote> emotes = e.getGuild().getEmotesByName(emote_no, true);\r\n                                                    if (emotes.isEmpty()) {\r\n                                                        emote_no = \"❌\";\r\n                                                    } else {\r\n                                                        Emote emote = emotes.get(0);\r\n                                                        emote_no = \"a:\" + emote.getName() + \":\" + emote.getId();\r\n                                                    }\r\n                                                }\r\n                                                System.out.println(emote_yes);\r\n                                                System.out.println(emote_no);\r\n                                                PreparedStatement p5 = c1.prepareStatement(\"INSERT INTO discordsrvutils_suggestions (Userid, Channel, Message, Suggestion, Number) VALUES (?, ?, ?, ?, ?)\");\r\n                                                p5.setLong(1, e.getMember().getIdLong());\r\n                                                p5.setLong(2, channel.getIdLong());\r\n                                                p5.setLong(3, msg.getIdLong());\r\n                                                p5.setString(4, e.getMessage().getContentRaw());\r\n                                                p5.setInt(5, ID);\r\n                                                p5.execute();\r\n                                                PreparedStatement p6 = c2.prepareStatement(\"DELETE FROM  suggestions_Awaiting WHERE userid=? AND Channel=?\");\r\n                                                p6.setLong(1, e.getMember().getIdLong());\r\n                                                p6.setLong(2, e.getChannel().getIdLong());\r\n                                                p6.execute();\r\n                                                msg.addReaction(emote_yes).queue();\r\n                                                msg.addReaction(emote_no).queue();\r\n                                                e.getChannel().sendMessage(\"Your Suggestion has been recorded.\").queue();\r\n                                            } catch (SQLException ex) {\r\n                                                ex.printStackTrace();\r\n                                            }\r\n                                        });\r\n                                    } catch (SQLException ex) {\r\n                                        ex.printStackTrace();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (!DiscordSRVUtils.BotSettingsconfig.isBungee()) {\r\n                            if (e.getMessage().getMentionedMembers().contains(e.getGuild().getSelfMember())) {\r\n                                e.getChannel().sendMessage(\"**My prefix is** `\" + prefix + \"`\").queue();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (SQLException exception) {\r\n            exception.printStackTrace();\r\n\r\n        }\r\n        Bukkit.getScheduler().runTask(core, () -> {\r\n            if (!DiscordSRVUtils.BotSettingsconfig.isBungee()) {\r\n                if (DiscordSRVUtils.Levelingconfig.Leveling_Enabled()) {\r\n                    Person person = core.getPersonByDiscordID(e.getMember().getIdLong());\r\n                    if (person.isLinked()) {\r\n                        if (!person.isBukkitCached()) return;\r\n                        person.addMessages(MessageType.Discord, 1);\r\n                        Long val = core.lastchattime.get(person.getMinecraftUUID());\r\n                        if (val == null) {\r\n                            core.lastchattime.put(person.getMinecraftUUID(), System.nanoTime());\r\n                        } else {\r\n                            if (!(System.nanoTime() - val >= EXPIRATION_NANOS)) return;\r\n                            core.lastchattime.remove(person.getMinecraftUUID());\r\n                            core.lastchattime.put(person.getMinecraftUUID(), System.nanoTime());\r\n                        }\r\n                        person.insertLeveling();\r\n                        person.addXP(BukkitEventListener.RANDOM.nextInt(25));\r\n                        if (person.getXP() >= 300) {\r\n                            person.clearXP();\r\n                            DiscordLevelupEvent ev = new DiscordLevelupEvent(e, person);\r\n                            Bukkit.getPluginManager().callEvent(ev);\r\n                            if (!ev.isCancelled()) {\r\n                                person.addLevels(1);\r\n                                if (e.getGuild().getTextChannelById(DiscordSRVUtils.Levelingconfig.levelup_channel()) == null) {\r\n                                    e.getChannel().sendMessage(conf.getConfigWithPapi(person.getMinecraftUUID(), String.join(\"\\n\", DiscordSRVUtils.Levelingconfig.levelup_Discord())).replace(\"[Level]\", person.getLevel() + \"\").replace(\"[User_Mention]\", e.getMember().getAsMention())).queue();\r\n                                } else {\r\n                                    e.getGuild().getTextChannelById(DiscordSRVUtils.Levelingconfig.levelup_channel()).sendMessage(conf.getConfigWithPapi(person.getMinecraftUUID(), String.join(\"\\n\", DiscordSRVUtils.Levelingconfig.levelup_Discord())).replace(\"[Level]\", person.getLevel() + \"\").replace(\"[User_Mention]\", e.getMember().getAsMention())).queue();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onMessageReactionAdd(MessageReactionAddEvent e) {\r\n        if (DiscordSRVUtils.BotSettingsconfig.isBungee()) return;\r\n        if (e.getMember().getUser().isBot()) return;\r\n        try (Connection conn = core.getDatabaseFile(); Connection conn2 = core.getDatabaseFile();) {\r\n            try (PreparedStatement p1 = conn.prepareStatement(\"SELECT * FROM discordsrvutils_tickets WHERE MessageId=?\")) {\r\n                p1.setLong(1, e.getMessageIdLong());\r\n                p1.execute();\r\n                try (ResultSet r1 = p1.executeQuery()) {\r\n                    if (r1.next()) {\r\n                        PreparedStatement pr = conn.prepareStatement(\"SELECT * FROM discordsrvutils_Opened_Tickets WHERE UserID=?\");\r\n                        pr.setLong(1, e.getMember().getIdLong());\r\n                        pr.execute();\r\n                        ResultSet rr1 = pr.executeQuery();\r\n                        if (!rr1.next()) {\r\n                            e.getReaction().removeReaction(e.getMember().getUser()).queue();\r\n                            e.getGuild().getCategoryById(r1.getLong(\"Opened_Category\")).createTextChannel(\"opened-\" + e.getMember().getEffectiveName()).queue(channel -> {\r\n                                channel.getManager().setTopic(\"Ticket created by \" + e.getMember().getUser().getName()).queue();\r\n                                channel.createPermissionOverride(e.getMember()).grant(Permission.VIEW_CHANNEL).queue();\r\n                                try (Connection conn3 = core.getDatabaseFile()) {\r\n                                    PreparedStatement p2 = conn3.prepareStatement(\"SELECT * FROM discordsrvutils_ticket_allowed_roles WHERE TicketID=?\");\r\n                                    PreparedStatement p3 = conn3.prepareStatement(\"SELECT * FROM discordsrvutils_tickets WHERE MessageId=?\");\r\n                                    p3.setLong(1, e.getMessageIdLong());\r\n                                    p3.execute();\r\n                                    ResultSet r2 = p3.executeQuery();\r\n                                    r2.next();\r\n\r\n                                    p2.setInt(1, r2.getInt(\"TicketID\"));\r\n                                    p2.execute();\r\n                                    ResultSet r3 = p2.executeQuery();\r\n                                    if (!channel.getPermissionOverrides().contains(channel.getPermissionOverride(e.getGuild().getPublicRole()))) {\r\n                                        channel.createPermissionOverride(e.getGuild().getPublicRole()).setDeny(Permission.VIEW_CHANNEL).queue();\r\n                                    } else {\r\n                                        channel.getPermissionOverride(e.getGuild().getPublicRole()).getManager().setDeny(Permission.VIEW_CHANNEL).queue();\r\n\r\n                                    }\r\n                                    while (r3.next()) {\r\n                                        if (!channel.getPermissionOverrides().contains(channel.getPermissionOverride(e.getGuild().getRoleById(r3.getLong(\"RoleID\"))))) {\r\n                                            channel.createPermissionOverride(e.getGuild().getRoleById(r3.getLong(\"RoleID\"))).grant(Permission.VIEW_CHANNEL).queue();\r\n                                        } else {\r\n                                            channel.getPermissionOverride(e.getGuild().getRoleById(r3.getLong(\"RoleID\"))).getManager().setAllow(Permission.VIEW_CHANNEL).queue();\r\n                                        }\r\n                                    }\r\n                                } catch (SQLException exception) {\r\n                                    exception.printStackTrace();\r\n                                }\r\n                                EmbedBuilder embed = new EmbedBuilder();\r\n                                embed.setTitle(\"Ticket\");\r\n                                embed.setColor(Color.GREEN);\r\n                                try (Connection conn1 = core.getDatabaseFile()) {\r\n\r\n                                    PreparedStatement cp1 = conn1.prepareStatement(\"SELECT * FROM discordsrvutils_tickets WHERE MessageId=?\");\r\n                                    cp1.setLong(1, e.getMessageIdLong());\r\n                                    cp1.execute();\r\n                                    ResultSet cr1 = cp1.executeQuery();\r\n                                    cr1.next();\r\n                                    embed.setDescription(\"here is your ticket.\\nReact with \\uD83D\\uDD12 to close this ticket. or use `\" + DiscordSRVUtils.BotSettingsconfig.BotPrefix() + \"close`.\\n\\n**TicketName:** \" + cr1.getString(\"Name\"));\r\n                                } catch (SQLException ex) {\r\n                                    ex.printStackTrace();\r\n                                }\r\n                                channel.sendMessage(e.getMember().getAsMention() + \" Welcome\").queue();\r\n                                channel.sendMessage(embed.build()).queue(message2 -> {\r\n                                    message2.addReaction(\"\\uD83D\\uDD12\").queue();\r\n                                    try (Connection fconn2 = core.getDatabaseFile();) {\r\n\r\n                                        PreparedStatement fp1 = fconn2.prepareStatement(\"INSERT INTO discordsrvutils_Opened_Tickets (UserID, MessageID, TicketID, Channel_id) VALUES (?, ?, ?, ?)\");\r\n                                        PreparedStatement fp2 = fconn2.prepareStatement(\"SELECT * FROM discordsrvutils_tickets WHERE MessageId=?\");\r\n                                        fp2.setLong(1, e.getMessageIdLong());\r\n                                        fp2.execute();\r\n                                        ResultSet fr1 = fp2.executeQuery();\r\n                                        fr1.next();\r\n\r\n\r\n                                        fp1.setLong(1, e.getMember().getIdLong());\r\n                                        fp1.setLong(2, message2.getIdLong());\r\n                                        fp1.setInt(3, fr1.getInt(\"TicketID\"));\r\n                                        fp1.setLong(4, channel.getIdLong());\r\n                                        fp1.execute();\r\n                                    } catch (SQLException exception) {\r\n                                        exception.printStackTrace();\r\n                                    }\r\n\r\n                                });\r\n                            });\r\n                        } else e.getReaction().removeReaction(e.getUser()).queue();\r\n                    } else {\r\n\r\n                        PreparedStatement p2 = conn2.prepareStatement(\"SELECT * FROM discordsrvutils_Opened_Tickets WHERE MessageID=?\");\r\n                        p2.setLong(1, e.getMessageIdLong());\r\n                        p2.execute();\r\n                        ResultSet r2 = p2.executeQuery();\r\n                        if (r2.next()) {\r\n\r\n\r\n                            PreparedStatement closed = conn2.prepareStatement(\"SELECT * FROM discordsrvutils_Opened_Tickets WHERE MessageID=?\");\r\n                            closed.setLong(1, e.getMessageIdLong());\r\n                            closed.execute();\r\n                            ResultSet closed2 = closed.executeQuery();\r\n                            closed2.next();\r\n                            PreparedStatement tickets = conn2.prepareStatement(\"SELECT * FROM discordsrvutils_tickets WHERE TicketID=?\");\r\n                            tickets.setLong(1, closed2.getInt(\"TicketID\"));\r\n                            tickets.execute();\r\n                            ResultSet ticketss = tickets.executeQuery();\r\n                            ticketss.next();\r\n                            if (e.getReactionEmote().getName().equals(\"\\uD83D\\uDD12\")) {\r\n                                EmbedBuilder embed = new EmbedBuilder();\r\n                                embed.setTitle(\"Ticket Closed\");\r\n                                embed.setDescription(\"Ticket Closed by \" + e.getMember().getAsMention() + \"\");\r\n                                embed.setColor(Color.YELLOW);\r\n                                e.getChannel().sendMessage(embed.build()).queue(msg -> {\r\n                                    try (Connection conn3 = core.getDatabaseFile()) {\r\n                                        ;\r\n                                        PreparedStatement prpstmt = conn3.prepareStatement(\"SELECT * FROM discordsrvutils_Opened_Tickets WHERE MessageID=?\");\r\n                                        prpstmt.setLong(1, e.getMessageIdLong());\r\n                                        prpstmt.execute();\r\n                                        ResultSet rr = prpstmt.executeQuery();\r\n                                        rr.next();\r\n                                        PreparedStatement ppp = conn3.prepareStatement(\"INSERT INTO discordsrvutils_Closed_Tickets (UserID, MessageID, TicketID, Channel_id, Closed_Message) VALUES (?, ?, ?, ?, ?)\");\r\n                                        ppp.setLong(1, rr.getLong(\"UserID\"));\r\n                                        ppp.setLong(2, e.getMessageIdLong());\r\n                                        ppp.setLong(3, rr.getInt(\"TicketID\"));\r\n                                        ppp.setLong(4, rr.getLong(\"Channel_id\"));\r\n                                        ppp.setLong(5, msg.getIdLong());\r\n                                        ppp.execute();\r\n                                        PreparedStatement prp = conn3.prepareStatement(\"DELETE FROM discordsrvutils_Opened_Tickets WHERE MessageID=?\");\r\n                                        prp.setLong(1, e.getMessageIdLong());\r\n                                        prp.execute();\r\n                                    } catch (SQLException ex) {\r\n                                        ex.printStackTrace();\r\n                                    }\r\n                                    msg.addReaction(\"\\uD83D\\uDDD1️\").queue();\r\n                                });\r\n                                e.getTextChannel().getPermissionOverride(e.getGuild().getMemberById(r2.getLong(\"UserID\"))).getManager().setDeny(Permission.VIEW_CHANNEL).queue();\r\n                                e.getReaction().removeReaction(e.getUser()).queue();\r\n                                e.getTextChannel().getManager().setParent(e.getGuild().getCategoryById(ticketss.getLong(\"Closed_Category\"))).queue();\r\n                                e.getTextChannel().getManager().setName(e.getTextChannel().getName().replace(\"opened\", \"closed\")).queue();\r\n\r\n                            }\r\n                        } else {\r\n                            //Message must be nothing or a complete closure message\r\n\r\n                            try (Connection conn5 = core.getDatabaseFile();) {\r\n                                PreparedStatement p3 = conn5.prepareStatement(\"SELECT * FROM discordsrvutils_Closed_Tickets WHERE Closed_Message=?\");\r\n                                p3.setLong(1, e.getMessageIdLong());\r\n                                p3.execute();\r\n                                ResultSet r3 = p3.executeQuery();\r\n                                if (r3.next()) {\r\n                                    if (e.getReactionEmote().getName().equals(\"\\uD83D\\uDDD1️\")) {\r\n                                        e.getTextChannel().delete().queue();\r\n                                    }\r\n                                } else {\r\n                                    String emote_yes = DiscordSRVUtils.SuggestionsConfig.emoji_yes();\r\n                                    String emote_no = DiscordSRVUtils.SuggestionsConfig.emoji_no();\r\n                                    String remote_yes;\r\n                                    String remote_no;\r\n                                    String yesparsed = EmojiParser.parseToUnicode(\":\" + emote_yes + \":\");\r\n                                    if (!yesparsed.equals(\":\" + emote_yes + \":\")) {\r\n                                        remote_yes = yesparsed;\r\n                                        emote_yes = yesparsed;\r\n                                    } else {\r\n                                        List<Emote> emotes = e.getGuild().getEmotesByName(emote_yes, true);\r\n                                        if (emotes.isEmpty()) {\r\n                                            remote_yes = \"✅\";\r\n                                            emote_yes = \"✅\";\r\n                                        } else {\r\n                                            Emote emote = emotes.get(0);\r\n                                            remote_yes = \"a:\" + emote.getName() + \":\" + emote.getId();\r\n                                        }\r\n                                    }\r\n                                    String noparesed = \":\" + emote_no + \":\";\r\n                                    if (!noparesed.equals(\":\" + emote_no + \":\")) {\r\n                                        remote_no = noparesed;\r\n                                        emote_no = noparesed;\r\n                                    } else {\r\n                                        List<Emote> emotes = e.getGuild().getEmotesByName(emote_no, true);\r\n                                        if (emotes.isEmpty()) {\r\n                                            remote_no = \"❌\";\r\n                                            emote_no = \"❌\";\r\n                                        } else {\r\n                                            Emote emote = emotes.get(0);\r\n                                            remote_no = \"a:\" + emote.getName() + \":\" + emote.getId();\r\n                                        }\r\n                                    }\r\n                                    PreparedStatement p4 = conn5.prepareStatement(\"SELECT * FROM discordsrvutils_suggestions WHERE Userid=? AND Channel=? AND Message=?\");\r\n                                    p4.setLong(1, e.getMember().getIdLong());\r\n                                    p4.setLong(2, e.getChannel().getIdLong());\r\n                                    p4.setLong(3, e.getMessageIdLong());\r\n                                    ResultSet r4 = p4.executeQuery();\r\n                                    if (r4.next()) {\r\n                                        e.getReaction().removeReaction(e.getUser()).queue();\r\n                                    } else {\r\n                                        PreparedStatement p5 = conn5.prepareStatement(\"SELECT * FROM discordsrvutils_suggestions WHERE Channel=? AND Message=?\");\r\n                                        p5.setLong(1, e.getChannel().getIdLong());\r\n                                        p5.setLong(2, e.getMessageIdLong());\r\n                                        ResultSet r5 = p5.executeQuery();\r\n                                        if (r5.next()) {\r\n                                            if (e.getReactionEmote().getName().equals(emote_yes)) {\r\n                                                e.getChannel().retrieveMessageById(e.getMessageId()).queue(msg -> {\r\n                                                    msg.removeReaction(remote_no, e.getUser()).queue();\r\n                                                });\r\n                                            } else if (e.getReactionEmote().getName().equals(emote_no)) {\r\n                                                e.getChannel().retrieveMessageById(e.getMessageId()).queue(msg -> {\r\n                                                    msg.removeReaction(remote_yes, e.getUser()).queue();\r\n                                                });\r\n\r\n                                            }\r\n                                        } else {\r\n                                            try (Connection conni = core.getMemoryConnection()) {\r\n                                                PreparedStatement p6 = conni.prepareStatement(\"SELECT * FROM helpmsges WHERE userid=? AND Channel=? AND MessageID=?\");\r\n                                                p6.setLong(1, e.getUserIdLong());\r\n                                                p6.setLong(2, e.getChannel().getIdLong());\r\n                                                p6.setLong(3, e.getMessageIdLong());\r\n                                                ResultSet r6 = p6.executeQuery();\r\n                                                if (r6.next()) {\r\n                                                    String prefix = DiscordSRVUtils.BotSettingsconfig.BotPrefix();\r\n                                                    if (e.getReactionEmote().getName().equals(\"➡️\")) {\r\n                                                        Map<Integer, String> map = new HashMap<>();\r\n                                                        int pages = 0;\r\n                                                        pages++;\r\n                                                        map.put(pages, \"Tickets\");\r\n                                                        if (DiscordSRVUtils.Levelingconfig.Leveling_Enabled()) {\r\n                                                            pages++;\r\n                                                            map.put(pages, \"Leveling\");\r\n                                                        }\r\n                                                        if (DiscordSRVUtils.Moderationconfig.isModeratorCommandsEnabled()) {\r\n                                                            pages++;\r\n                                                            map.put(pages, \"Moderation\");\r\n                                                        }\r\n                                                        if (DiscordSRVUtils.SuggestionsConfig.isEnabled()) {\r\n                                                            pages++;\r\n                                                            map.put(pages, \"Suggestions\");\r\n                                                        }\r\n                                                        e.getReaction().removeReaction(e.getUser()).queue();\r\n                                                        int newpages = r6.getInt(\"Page\") + 1;\r\n                                                        if (pages >= newpages) {\r\n                                                            EmbedBuilder embed = new EmbedBuilder();\r\n                                                            String val = map.get(newpages);\r\n                                                            embed.setTitle(\"Page \" + newpages + \" | \" + val);\r\n                                                            embed.setColor(Color.GREEN);\r\n                                                            if (val.equalsIgnoreCase(\"Suggestions\")) {\r\n                                                                embed.setDescription(\"`\" + prefix + \"suggest`, `\" + prefix + \"suggestionreply`\");\r\n                                                            } else if (val.equalsIgnoreCase(\"Leveling\")) {\r\n                                                                embed.setDescription(\"`\" + prefix + \"level`, `\" + prefix + \"leaderboard`\");\r\n                                                            } else if (val.equalsIgnoreCase(\"Moderation\")) {\r\n                                                                embed.setDescription(\"`\" + prefix + \"ban`, `\" + prefix + \"unban`, `\" + prefix + \"mute`, `\" + prefix + \"unmute`\");\r\n                                                            }\r\n                                                            e.getChannel().editMessageById(e.getMessageId(), embed.build()).queue();\r\n                                                            PreparedStatement p7 = conni.prepareStatement(\"UPDATE helpmsges SET Page=? WHERE userid=? AND Channel=? AND MessageID=?\");\r\n                                                            p7.setLong(1, newpages);\r\n                                                            p7.setLong(2, e.getUserIdLong());\r\n                                                            p7.setLong(3, e.getChannel().getIdLong());\r\n                                                            p7.setLong(4, e.getMessageIdLong());\r\n                                                            p7.execute();\r\n                                                        }\r\n\r\n\r\n                                                    } else if (e.getReactionEmote().getName().equals(\"⬅️\")) {\r\n                                                        if (e.getReactionEmote().getName().equals(\"⬅️\")) {\r\n                                                            Map<Integer, String> map = new HashMap<>();\r\n                                                            int pages = 0;\r\n                                                            pages++;\r\n                                                            map.put(pages, \"Tickets\");\r\n                                                            if (DiscordSRVUtils.Levelingconfig.Leveling_Enabled()) {\r\n                                                                pages++;\r\n                                                                map.put(pages, \"Leveling\");\r\n                                                            }\r\n                                                            if (DiscordSRVUtils.Moderationconfig.isModeratorCommandsEnabled()) {\r\n                                                                pages++;\r\n                                                                map.put(pages, \"Moderation\");\r\n                                                            }\r\n                                                            if (DiscordSRVUtils.SuggestionsConfig.isEnabled()) {\r\n                                                                pages++;\r\n                                                                map.put(pages, \"Suggestions\");\r\n                                                            }\r\n                                                            e.getReaction().removeReaction(e.getUser()).queue();\r\n                                                            int newpages = r6.getInt(\"Page\") - 1;\r\n                                                            if (pages != 0) {\r\n                                                                EmbedBuilder embed = new EmbedBuilder();\r\n                                                                String val = map.get(newpages);\r\n                                                                embed.setTitle(\"Page \" + newpages + \" | \" + val);\r\n                                                                embed.setColor(Color.GREEN);\r\n                                                                if (val.equalsIgnoreCase(\"Suggestions\")) {\r\n                                                                    embed.setDescription(\"`\" + prefix + \"suggest`, `\" + prefix + \"suggestionreply`\");\r\n                                                                } else if (val.equalsIgnoreCase(\"Leveling\")) {\r\n                                                                    embed.setDescription(\"`\" + prefix + \"level`, `\" + prefix + \"leaderboard`\");\r\n                                                                } else if (val.equalsIgnoreCase(\"Moderation\")) {\r\n                                                                    embed.setDescription(\"`\" + prefix + \"ban`, `\" + prefix + \"unban`, `\" + prefix + \"mute`, `\" + prefix + \"unmute`\");\r\n                                                                } else if (val.equalsIgnoreCase(\"Tickets\")) {\r\n                                                                    embed.setDescription(\"`\" + prefix + \"createticket`, `\" + prefix + \"ticketlookup`, `\" + prefix + \"editticket`, `\" + prefix + \"close`, `\" + prefix + \"deleteticket`, `\" + prefix + \"editticket`\");\r\n                                                                }\r\n                                                                e.getChannel().editMessageById(e.getMessageId(), embed.build()).queue();\r\n                                                                PreparedStatement p7 = conni.prepareStatement(\"UPDATE helpmsges SET Page=? WHERE userid=? AND Channel=? AND MessageID=?\");\r\n                                                                p7.setLong(1, newpages);\r\n                                                                p7.setLong(2, e.getUserIdLong());\r\n                                                                p7.setLong(3, e.getChannel().getIdLong());\r\n                                                                p7.setLong(4, e.getMessageIdLong());\r\n                                                                p7.execute();\r\n                                                            }\r\n\r\n\r\n                                                        }\r\n                                                    } else if (e.getReactionEmote().getName().equals(\"\\uD83D\\uDDD1️\")) {\r\n                                                        e.getReaction().removeReaction(e.getUser()).queue();\r\n                                                        e.getChannel().editMessageById(e.getMessageId(), \"Deleted by User\").embed(null).override(true).queue(msg -> {\r\n                                                            for (MessageReaction reaction : msg.getReactions()) {\r\n                                                                reaction.removeReaction().queue();\r\n                                                            }\r\n                                                        });\r\n                                                        PreparedStatement p7 = conni.prepareStatement(\"DELETE FROM helpmsges WHERE MessageID=?\");\r\n                                                        p7.setLong(1, e.getMessageIdLong());\r\n                                                        p7.execute();\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } catch (SQLException ex) {\r\n                                ex.printStackTrace();\r\n                            }\r\n                            try (Connection conni = core.getMemoryConnection()) {\r\n                                PreparedStatement p3 = conni.prepareStatement(\"SELECT * FROM srmsgesreply WHERE userid=? AND Channel=? AND Awaiting_isAccepted=?\");\r\n                                p3.setLong(1, e.getUserIdLong());\r\n                                p3.setLong(2, e.getChannel().getIdLong());\r\n                                p3.setLong(3, e.getMessageIdLong());\r\n                                ResultSet r3 = p3.executeQuery();\r\n                                if (r3.next()) {\r\n                                    if (r3.getInt(\"step\") == 1) {\r\n                                        e.getReaction().removeReaction(e.getUser()).queue();\r\n                                        if (e.getReactionEmote().getName().equals(\"\\uD83C\\uDDF3\")) {\r\n                                            PreparedStatement p4 = conni.prepareStatement(\"UPDATE srmsgesreply SET step=2, isAccepted='false', LastOutput=? WHERE userid=? AND Channel=?\");\r\n                                            p4.setLong(1, System.currentTimeMillis());\r\n                                            p4.setLong(2, e.getUserIdLong());\r\n                                            p4.setLong(3, e.getChannel().getIdLong());\r\n                                            p4.execute();\r\n                                            e.getChannel().sendMessage(\"Suggestion was denied, Please enter your note below\").queue();\r\n                                        } else if (e.getReactionEmote().getName().equals(\"\\uD83C\\uDDFE\")) {\r\n                                            PreparedStatement p4 = conni.prepareStatement(\"UPDATE srmsgesreply SET step=2, isAccepted='true', LastOutput WHERE userid=? AND Channel=?\");\r\n                                            p4.setLong(1, System.currentTimeMillis());\r\n                                            p4.setLong(2, e.getUserIdLong());\r\n                                            p4.setLong(3, e.getChannel().getIdLong());\r\n                                            p4.execute();\r\n                                            e.getChannel().sendMessage(\"Suggestion was accepted, Please enter your note below\").queue();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } catch (SQLException ex) {\r\n                                ex.printStackTrace();\r\n                            }\r\n\r\n                            try (Connection conn5 = core.getDatabaseFile();) {\r\n                                PreparedStatement p3 = conn5.prepareStatement(\"SELECT * FROM discordsrvutils_Closed_Tickets WHERE Closed_Message=?\");\r\n                                p3.setLong(1, e.getMessageIdLong());\r\n                                p3.execute();\r\n                                ResultSet r3 = p3.executeQuery();\r\n                            } catch (SQLException ex) {\r\n                                ex.printStackTrace();\r\n                            }\r\n\r\n\r\n                            try (Connection con = core.getMemoryConnection()) {\r\n                                PreparedStatement p3 = con.prepareStatement(\"SELECT * FROM discordsrvutils_Awaiting_Edits WHERE UserID=? AND Channel_id=? AND MessageID=?\");\r\n                                p3.setLong(1, e.getMember().getIdLong());\r\n                                p3.setLong(2, e.getTextChannel().getIdLong());\r\n                                p3.setLong(3, e.getMessageIdLong());\r\n                                p3.execute();\r\n                                ResultSet r3 = p3.executeQuery();\r\n                                if (r3.next()) {\r\n                                    e.getReaction().removeReaction(e.getUser()).queue();\r\n                                    if (r3.getInt(\"Type\") == 0) {\r\n                                        if (e.getReactionEmote().getName().equals(\"1️⃣\")) {\r\n                                            EmbedBuilder embed = new EmbedBuilder();\r\n                                            embed.setTitle(\"Edit ticket (Name)\");\r\n                                            embed.setColor(Color.RED);\r\n                                            embed.setDescription(\"Please send the new name of the ticket.\");\r\n                                            e.getTextChannel().sendMessage(embed.build()).queue();\r\n                                            PreparedStatement p4 = con.prepareStatement(\"UPDATE discordsrvutils_Awaiting_Edits SET Type=1 WHERE Channel_id=? AND UserID=? AND MessageID=?\");\r\n                                            p4.setLong(1, e.getChannel().getIdLong());\r\n                                            p4.setLong(2, e.getMember().getIdLong());\r\n                                            p4.setLong(3, e.getMessageIdLong());\r\n                                            p4.execute();\r\n                                        } else if (e.getReactionEmote().getName().equals(\"2️⃣\")) {\r\n                                            EmbedBuilder embed = new EmbedBuilder();\r\n                                            embed.setTitle(\"Edit ticket (Opened category)\");\r\n                                            embed.setColor(Color.RED);\r\n                                            embed.setDescription(\"Please send the new Opened category ID.\");\r\n                                            e.getTextChannel().sendMessage(embed.build()).queue();\r\n                                            PreparedStatement p4 = con.prepareStatement(\"UPDATE discordsrvutils_Awaiting_Edits SET Type=2 WHERE Channel_id=? AND UserID=? AND MessageID=?\");\r\n                                            p4.setLong(1, e.getChannel().getIdLong());\r\n                                            p4.setLong(2, e.getMember().getIdLong());\r\n                                            p4.setLong(3, e.getMessageIdLong());\r\n                                            p4.execute();\r\n\r\n                                        } else if (e.getReactionEmote().getName().equals(\"3️⃣\")) {\r\n                                            EmbedBuilder embed = new EmbedBuilder();\r\n                                            embed.setTitle(\"Edit ticket (Closed category)\");\r\n                                            embed.setColor(Color.RED);\r\n                                            embed.setDescription(\"Please send the new Closed category ID.\");\r\n                                            e.getTextChannel().sendMessage(embed.build()).queue();\r\n                                            PreparedStatement p4 = con.prepareStatement(\"UPDATE discordsrvutils_Awaiting_Edits SET Type=3 WHERE Channel_id=? AND UserID=? AND MessageID=?\");\r\n                                            p4.setLong(1, e.getChannel().getIdLong());\r\n                                            p4.setLong(2, e.getMember().getIdLong());\r\n                                            p4.setLong(3, e.getMessageIdLong());\r\n                                            p4.execute();\r\n\r\n                                        } else if (e.getReactionEmote().getName().equals(\"4️⃣\")) {\r\n                                            EmbedBuilder embed = new EmbedBuilder();\r\n                                            embed.setTitle(\"Edit ticket (Allowed roles)\");\r\n                                            embed.setColor(Color.RED);\r\n                                            embed.setDescription(\"Please mention the new ticket view allowed roles.\");\r\n                                            e.getTextChannel().sendMessage(embed.build()).queue();\r\n                                            PreparedStatement p4 = con.prepareStatement(\"UPDATE discordsrvutils_Awaiting_Edits SET Type=4 WHERE Channel_id=? AND UserID=? AND MessageID=?\");\r\n                                            p4.setLong(1, e.getChannel().getIdLong());\r\n                                            p4.setLong(2, e.getMember().getIdLong());\r\n                                            p4.setLong(3, e.getMessageIdLong());\r\n                                            p4.execute();\r\n\r\n                                        } else if (e.getReactionEmote().getName().equals(\"5️⃣\")) {\r\n                                            EmbedBuilder embed = new EmbedBuilder();\r\n                                            embed.setTitle(\"Edit ticket (Message channel)\");\r\n                                            embed.setColor(Color.RED);\r\n                                            embed.setDescription(\"Please mention the new message channel.\\n\\n**Warning:** Old message channel will no longer work.\");\r\n                                            e.getTextChannel().sendMessage(embed.build()).queue();\r\n                                            PreparedStatement p4 = con.prepareStatement(\"UPDATE discordsrvutils_Awaiting_Edits SET Type=5 WHERE Channel_id=? AND UserID=? AND MessageID=?\");\r\n                                            p4.setLong(1, e.getChannel().getIdLong());\r\n                                            p4.setLong(2, e.getMember().getIdLong());\r\n                                            p4.setLong(3, e.getMessageIdLong());\r\n                                            p4.execute();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } catch (SQLException ex) {\r\n                                ex.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        } catch (SQLException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onTextChannelDelete(TextChannelDeleteEvent e) {\r\n        try (Connection conn = core.getDatabaseFile(); Connection mconn = core.getMemoryConnection()) {\r\n            PreparedStatement p1 = conn.prepareStatement(\"DELETE FROM discordsrvutils_Opened_Tickets WHERE Channel_id=?\");\r\n            p1.setLong(1, e.getChannel().getIdLong());\r\n            p1.execute();\r\n            PreparedStatement p2 = conn.prepareStatement(\"DELETE FROM discordsrvutils_Closed_Tickets WHERE Channel_id=?\");\r\n            p2.setLong(1, e.getChannel().getIdLong());\r\n            p2.execute();\r\n            PreparedStatement p3 = conn.prepareStatement(\"DELETE FROM helpmsges WHERE Channel=?\");\r\n            p3.setLong(1, e.getChannel().getIdLong());\r\n            p3.execute();\r\n        } catch (SQLException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    public boolean isModerator(Member member) {\r\n        boolean canuse = false;\r\n        for (Role role : member.getRoles()) {\r\n            if (DiscordSRVUtils.Moderationconfig.rolesAllowedToUseModeratorCommands().contains(role.getId())) {\r\n                canuse = true;\r\n            }\r\n            if (DiscordSRVUtils.Moderationconfig.rolesAllowedToUseModeratorCommands().contains(role.getName())) {\r\n                canuse = true;\r\n            }\r\n        }\r\n        if (!canuse) {\r\n            if (member.hasPermission(Permission.MANAGE_SERVER)) {\r\n                return true;\r\n            }\r\n        } else return true;\r\n        return false;\r\n    }\r\n\r\n    public void onMessageDelete(MessageDeleteEvent e) {\r\n        try (Connection conn = core.getMemoryConnection()) {\r\n            PreparedStatement p1 = conn.prepareStatement(\"DELETE FROM helpmsges WHERE MessageID=?\");\r\n            p1.setLong(1, e.getMessageIdLong());\r\n            p1.execute();\r\n        } catch (SQLException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tech/bedev/discordsrvutils/events/JDAEvents.java	(revision 52e72c775d8a697877a85792d687acbb295159cc)
+++ src/main/java/tech/bedev/discordsrvutils/events/JDAEvents.java	(date 1610445221817)
@@ -1842,7 +1842,7 @@
                                             p4.execute();
                                             e.getChannel().sendMessage("Suggestion was denied, Please enter your note below").queue();
                                         } else if (e.getReactionEmote().getName().equals("\uD83C\uDDFE")) {
-                                            PreparedStatement p4 = conni.prepareStatement("UPDATE srmsgesreply SET step=2, isAccepted='true', LastOutput WHERE userid=? AND Channel=?");
+                                            PreparedStatement p4 = conni.prepareStatement("UPDATE srmsgesreply SET step=2, isAccepted='true', LastOutput=? WHERE userid=? AND Channel=?");
                                             p4.setLong(1, System.currentTimeMillis());
                                             p4.setLong(2, e.getUserIdLong());
                                             p4.setLong(3, e.getChannel().getIdLong());
@@ -1959,7 +1959,7 @@
             PreparedStatement p2 = conn.prepareStatement("DELETE FROM discordsrvutils_Closed_Tickets WHERE Channel_id=?");
             p2.setLong(1, e.getChannel().getIdLong());
             p2.execute();
-            PreparedStatement p3 = conn.prepareStatement("DELETE FROM helpmsges WHERE Channel=?");
+            PreparedStatement p3 = mconn.prepareStatement("DELETE FROM helpmsges WHERE Channel=?");
             p3.setLong(1, e.getChannel().getIdLong());
             p3.execute();
         } catch (SQLException ex) {
Index: build/resources/main/plugin.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>name: DiscordSRVUtils\r\nsoftdepend:\r\n  - DiscordSRV\r\n  - Essentials\r\n  - Advancedban\r\nversion: 1.1.9\r\nmain: tech.bedev.discordsrvutils.DiscordSRVUtils\r\nauthor: Blue_Tree\r\napi-version: 1.13\r\n\r\ncommands:\r\n  discordsrvutils:\r\n    aliases: [dsrvu, dsu, du, discordu, srvu]\r\n  setlevel:\r\n    aliases: [sl, setl]\r\n    permission: discordsrvutils.setlevel\r\n  addlevels:\r\n    aliases: [al, addl]\r\n    permission: discordsrvutils.addlevels\r\n\r\n  removelevels:\r\n    aliases: [rl, removelevels]\r\n    permission: discordsrvutils.removelevels\r\n  setxp:\r\n    aliases: [ sxp, setl ]\r\n    permission: discordsrvutils.setxp\r\n  addxp:\r\n    aliases: [ axp, addxp]\r\n    permission: discordsrvutils.addxp\r\n  removexp:\r\n    aliases: [rxp, removexp]\r\n    permission: discordsrvutils.removexp\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/resources/main/plugin.yml	(revision 52e72c775d8a697877a85792d687acbb295159cc)
+++ build/resources/main/plugin.yml	(date 1610901587692)
@@ -3,32 +3,32 @@
   - DiscordSRV
   - Essentials
   - Advancedban
-version: 1.1.9
+version: 1.1.12
 main: tech.bedev.discordsrvutils.DiscordSRVUtils
 author: Blue_Tree
 api-version: 1.13
 
 commands:
   discordsrvutils:
-    aliases: [dsrvu, dsu, du, discordu, srvu]
+    aliases: [ dsrvu, dsu, du, discordu, srvu ]
   setlevel:
-    aliases: [sl, setl]
+    aliases: [ sl, setl ]
     permission: discordsrvutils.setlevel
   addlevels:
-    aliases: [al, addl]
+    aliases: [ al, addl ]
     permission: discordsrvutils.addlevels
 
   removelevels:
-    aliases: [rl, removelevels]
+    aliases: [ rl, removelevels ]
     permission: discordsrvutils.removelevels
   setxp:
     aliases: [ sxp, setl ]
     permission: discordsrvutils.setxp
   addxp:
-    aliases: [ axp, addxp]
+    aliases: [ axp, addxp ]
     permission: discordsrvutils.addxp
   removexp:
-    aliases: [rxp, removexp]
+    aliases: [ rxp, removexp ]
     permission: discordsrvutils.removexp
 
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"BranchesTreeState\">\r\n    <expand>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n    </expand>\r\n    <select />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"a8c5baa4-c655-4f7e-ad36-95c165c566e0\" name=\"Default Changelist\" comment=\"v1.1.9\">\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/checksums/checksums.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/checksums/checksums.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/jarRepositories.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/jarRepositories.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"DiscordSRVUtils\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"DiscordSRVUtils\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"DiscordSRVUtils\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"build\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"DiscordSRVUtils\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"publishing\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"DiscordSRVUtils\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Run Configurations\" type=\"7b0102dc:RunConfigurationsNode\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Enum\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHome\" value=\"C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2020.2.1\\plugins\\maven\\lib\\maven3\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1m9Y0E0ppFo9YAHkkXzOmwqrzGb\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/build.gradle\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Project\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.15\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.35287356\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"reference.settingsdialog.project.gradle\" />\r\n    <property name=\"show.unlinked.gradle.project.popup\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RunAnythingCache\">\r\n    <option name=\"myCommands\">\r\n      <command value=\"mvn -U package\" />\r\n      <command value=\"gradle build\" />\r\n      <command value=\"gradle shadowJar\" />\r\n      <command value=\"gradle clean\" />\r\n      <command value=\"gradle compileJava\" />\r\n      <command value=\"gradle -U shadowJar\" />\r\n      <command value=\"gradle shadowJar --refresh-dependencies\" />\r\n      <command value=\"gradle build --refresh-dependencies --stacktrace\" />\r\n      <command value=\"gradle cleanBuildCache\" />\r\n      <command value=\"gradlew cleanBuildCache\" />\r\n      <command value=\"gradle build --refresh-dependencies\" />\r\n    </option>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Gradle.DiscordSRVUtils [shadowJar]\">\r\n    <configuration name=\"DiscordSRVUtils [build]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"build\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" value=\"\" />\r\n      </ExternalSystemSettings>\r\n      <GradleScriptDebugEnabled>true</GradleScriptDebugEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"DiscordSRVUtils [cleanBuildCache]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"cleanBuildCache\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" value=\"\" />\r\n      </ExternalSystemSettings>\r\n      <GradleScriptDebugEnabled>true</GradleScriptDebugEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"DiscordSRVUtils [clean]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"clean\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" value=\"\" />\r\n      </ExternalSystemSettings>\r\n      <GradleScriptDebugEnabled>true</GradleScriptDebugEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"DiscordSRVUtils [compileJava]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"compileJava\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" value=\"\" />\r\n      </ExternalSystemSettings>\r\n      <GradleScriptDebugEnabled>true</GradleScriptDebugEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"DiscordSRVUtils [shadowJar]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"shadowJar\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" value=\"\" />\r\n      </ExternalSystemSettings>\r\n      <GradleScriptDebugEnabled>true</GradleScriptDebugEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Gradle.DiscordSRVUtils [shadowJar]\" />\r\n        <item itemvalue=\"Gradle.DiscordSRVUtils [clean]\" />\r\n        <item itemvalue=\"Gradle.DiscordSRVUtils [cleanBuildCache]\" />\r\n        <item itemvalue=\"Gradle.DiscordSRVUtils [compileJava]\" />\r\n        <item itemvalue=\"Gradle.DiscordSRVUtils [build]\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SQLPlugin.ProjectConfiguration\">\r\n    <queries />\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"a8c5baa4-c655-4f7e-ad36-95c165c566e0\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1608907052643</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1608907052643</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"1.0.12\">\r\n      <created>1608934526426</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1608934526426</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"v.1.1.1\">\r\n      <created>1609667839126</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1609667839126</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Added README.md\">\r\n      <created>1609668076310</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1609668076310</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"again\">\r\n      <created>1609668119709</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1609668119709</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Added starts of suggestion (Dont clone this it's not working)\">\r\n      <created>1609755538600</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1609755538600</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Suggestions working, making the leaderboard\">\r\n      <created>1610195571577</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1610195571577</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"I hate giving commit a message\">\r\n      <created>1610208258029</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1610208258029</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\":)\">\r\n      <created>1610285237868</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1610285237868</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Finshed !sr command\">\r\n      <created>1610291642665</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1610291642665</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"XD\">\r\n      <created>1610291783612</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1610291783612</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Done with sr command, done with clear memory command, and maybe i will release this to spigot\">\r\n      <created>1610311811503</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1610311811503</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"v1.1.8\">\r\n      <created>1610321349821</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1610321349821</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"v1.1.8\">\r\n      <created>1610327918585</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1610327918585</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"v1.1.8\">\r\n      <created>1610328254619</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1610328254619</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"v1.1.9\">\r\n      <created>1610330310730</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1610330310730</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"16\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"1.0.12\" />\r\n    <MESSAGE value=\"v.1.1.1\" />\r\n    <MESSAGE value=\"Added README.md\" />\r\n    <MESSAGE value=\"again\" />\r\n    <MESSAGE value=\"Added starts of suggestion (Dont clone this it's not working)\" />\r\n    <MESSAGE value=\"Suggestions working, making the leaderboard\" />\r\n    <MESSAGE value=\"I hate giving commit a message\" />\r\n    <MESSAGE value=\":)\" />\r\n    <MESSAGE value=\"Finshed !sr command\" />\r\n    <MESSAGE value=\"XD\" />\r\n    <MESSAGE value=\"Done with sr command, done with clear memory command, and maybe i will release this to spigot\" />\r\n    <MESSAGE value=\"v1.1.8\" />\r\n    <MESSAGE value=\"v1.1.9\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"v1.1.9\" />\r\n  </component>\r\n  <component name=\"WindowStateProjectService\">\r\n    <state x=\"488\" y=\"67\" key=\"#com.intellij.ide.util.MemberChooser\" timestamp=\"1610290053724\">\r\n      <screen x=\"0\" y=\"0\" width=\"1366\" height=\"728\" />\r\n    </state>\r\n    <state x=\"488\" y=\"67\" key=\"#com.intellij.ide.util.MemberChooser/0.0.1366.728@0.0.1366.728\" timestamp=\"1610290053724\" />\r\n    <state x=\"413\" y=\"11\" key=\"#com.intellij.ide.util.frameworkSupport.AddFrameworkSupportDialog\" timestamp=\"1609705568664\">\r\n      <screen x=\"0\" y=\"0\" width=\"1366\" height=\"728\" />\r\n    </state>\r\n    <state x=\"413\" y=\"11\" key=\"#com.intellij.ide.util.frameworkSupport.AddFrameworkSupportDialog/0.0.1366.728@0.0.1366.728\" timestamp=\"1609705568664\" />\r\n    <state x=\"363\" y=\"99\" key=\"#com.intellij.openapi.updateSettings.impl.PluginUpdateInfoDialog\" timestamp=\"1610194009879\">\r\n      <screen x=\"0\" y=\"0\" width=\"1366\" height=\"728\" />\r\n    </state>\r\n    <state x=\"363\" y=\"99\" key=\"#com.intellij.openapi.updateSettings.impl.PluginUpdateInfoDialog/0.0.1366.728@0.0.1366.728\" timestamp=\"1610194009879\" />\r\n    <state x=\"92\" y=\"92\" width=\"1182\" height=\"544\" key=\"DiffContextDialog\" timestamp=\"1610278211229\">\r\n      <screen x=\"0\" y=\"0\" width=\"1366\" height=\"728\" />\r\n    </state>\r\n    <state x=\"92\" y=\"92\" width=\"1182\" height=\"544\" key=\"DiffContextDialog/0.0.1366.728@0.0.1366.728\" timestamp=\"1610278211229\" />\r\n    <state x=\"463\" y=\"118\" key=\"FileChooserDialogImpl\" timestamp=\"1610328487252\">\r\n      <screen x=\"0\" y=\"0\" width=\"1366\" height=\"728\" />\r\n    </state>\r\n    <state x=\"463\" y=\"118\" key=\"FileChooserDialogImpl/0.0.1366.728@0.0.1366.728\" timestamp=\"1610328487252\" />\r\n    <state width=\"1323\" height=\"172\" key=\"GridCell.Tab.0.bottom\" timestamp=\"1610364510292\">\r\n      <screen x=\"0\" y=\"0\" width=\"1366\" height=\"728\" />\r\n    </state>\r\n    <state width=\"1323\" height=\"172\" key=\"GridCell.Tab.0.bottom/0.0.1366.728@0.0.1366.728\" timestamp=\"1610364510292\" />\r\n    <state width=\"1323\" height=\"172\" key=\"GridCell.Tab.0.center\" timestamp=\"1610364510292\">\r\n      <screen x=\"0\" y=\"0\" width=\"1366\" height=\"728\" />\r\n    </state>\r\n    <state width=\"1323\" height=\"172\" key=\"GridCell.Tab.0.center/0.0.1366.728@0.0.1366.728\" timestamp=\"1610364510292\" />\r\n    <state width=\"1323\" height=\"172\" key=\"GridCell.Tab.0.left\" timestamp=\"1610364510292\">\r\n      <screen x=\"0\" y=\"0\" width=\"1366\" height=\"728\" />\r\n    </state>\r\n    <state width=\"1323\" height=\"172\" key=\"GridCell.Tab.0.left/0.0.1366.728@0.0.1366.728\" timestamp=\"1610364510292\" />\r\n    <state width=\"1323\" height=\"172\" key=\"GridCell.Tab.0.right\" timestamp=\"1610364510292\">\r\n      <screen x=\"0\" y=\"0\" width=\"1366\" height=\"728\" />\r\n    </state>\r\n    <state width=\"1323\" height=\"172\" key=\"GridCell.Tab.0.right/0.0.1366.728@0.0.1366.728\" timestamp=\"1610364510292\" />\r\n    <state x=\"184\" y=\"0\" key=\"SettingsEditor\" timestamp=\"1610327145083\">\r\n      <screen x=\"0\" y=\"0\" width=\"1366\" height=\"728\" />\r\n    </state>\r\n    <state x=\"184\" y=\"0\" key=\"SettingsEditor/0.0.1366.728@0.0.1366.728\" timestamp=\"1610327145083\" />\r\n    <state x=\"275\" y=\"92\" key=\"Vcs.Push.Dialog.v2\" timestamp=\"1610330318175\">\r\n      <screen x=\"0\" y=\"0\" width=\"1366\" height=\"728\" />\r\n    </state>\r\n    <state x=\"275\" y=\"92\" key=\"Vcs.Push.Dialog.v2/0.0.1366.728@0.0.1366.728\" timestamp=\"1610330318175\" />\r\n    <state x=\"501\" y=\"277\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2\" timestamp=\"1610364646670\">\r\n      <screen x=\"0\" y=\"0\" width=\"1366\" height=\"728\" />\r\n    </state>\r\n    <state x=\"501\" y=\"277\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.1366.728@0.0.1366.728\" timestamp=\"1610364646670\" />\r\n    <state x=\"391\" y=\"81\" width=\"583\" height=\"566\" key=\"find.popup\" timestamp=\"1608934484308\">\r\n      <screen x=\"0\" y=\"0\" width=\"1366\" height=\"728\" />\r\n    </state>\r\n    <state x=\"391\" y=\"81\" width=\"583\" height=\"566\" key=\"find.popup/0.0.1366.728@0.0.1366.728\" timestamp=\"1608934484308\" />\r\n    <state x=\"65\" y=\"0\" key=\"new project wizard\" timestamp=\"1608934820969\">\r\n      <screen x=\"0\" y=\"0\" width=\"1366\" height=\"728\" />\r\n    </state>\r\n    <state x=\"65\" y=\"0\" key=\"new project wizard/0.0.1366.728@0.0.1366.728\" timestamp=\"1608934820969\" />\r\n    <state x=\"339\" y=\"162\" width=\"672\" height=\"677\" key=\"run.anything.popup\" timestamp=\"1610327751100\">\r\n      <screen x=\"0\" y=\"0\" width=\"1366\" height=\"728\" />\r\n    </state>\r\n    <state x=\"339\" y=\"162\" width=\"672\" height=\"677\" key=\"run.anything.popup/0.0.1366.728@0.0.1366.728\" timestamp=\"1610327751100\" />\r\n    <state x=\"346\" y=\"49\" width=\"672\" height=\"678\" key=\"search.everywhere.popup\" timestamp=\"1610199379156\">\r\n      <screen x=\"0\" y=\"0\" width=\"1366\" height=\"728\" />\r\n    </state>\r\n    <state x=\"346\" y=\"49\" width=\"672\" height=\"678\" key=\"search.everywhere.popup/0.0.1366.728@0.0.1366.728\" timestamp=\"1610199379156\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision 52e72c775d8a697877a85792d687acbb295159cc)
+++ .idea/workspace.xml	(date 1611864241733)
@@ -22,11 +22,45 @@
     <select />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="a8c5baa4-c655-4f7e-ad36-95c165c566e0" name="Default Changelist" comment="v1.1.9">
+    <list default="true" id="a8c5baa4-c655-4f7e-ad36-95c165c566e0" name="Default Changelist" comment="Fixed another bug">
       <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.gradle/checksums/checksums.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/checksums/checksums.lock" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/jarRepositories.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/jarRepositories.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build.gradle" beforeDir="false" afterPath="$PROJECT_DIR$/build.gradle" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/DiscordSRVUtils.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/DiscordSRVUtils.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/Managers/ConfOptionsManager.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/Managers/ConfOptionsManager.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/Managers/Tickets.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/Managers/Tickets.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/Managers/TimeFormatter.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/Managers/TimeFormatter.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/Managers/TimerManager.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/Managers/TimerManager.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/Person/Person.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/Person/Person.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/Person/PersonImpl$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/Person/PersonImpl$1.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/Person/PersonImpl.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/Person/PersonImpl.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/PlaceholderAPI.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/PlaceholderAPI.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/PluginConfiguration.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/PluginConfiguration.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/SRCanceller.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/SRCanceller.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/StatusUpdater.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/StatusUpdater.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/SuggestionsIdleHandler.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/SuggestionsIdleHandler.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/TPSCounter.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/TPSCounter.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/TimeHandler.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/TimeHandler.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/UpdateChecker.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/UpdateChecker.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/commands/DiscordSRVUtilsCommand.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/commands/DiscordSRVUtilsCommand.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/AdvancedBanListener$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/AdvancedBanListener$1.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/AdvancedBanListener.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/AdvancedBanListener.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/BukkitEventListener$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/BukkitEventListener$1.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/BukkitEventListener.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/BukkitEventListener.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/DiscordLevelupEvent.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/DiscordLevelupEvent.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/DiscordSRVEventListener.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/DiscordSRVEventListener.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/EssentialsAfk.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/EssentialsAfk.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/JDAEvents.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/JDAEvents.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/PlayerLevelupEvent.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/events/PlayerLevelupEvent.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/helpDeleter.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/helpDeleter.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/leaderboard/LeaderBoardManagerImpl.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/leaderboard/LeaderBoardManagerImpl.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/utils/StringUtils.class" beforeDir="false" afterPath="$PROJECT_DIR$/build/classes/java/main/tech/bedev/discordsrvutils/utils/StringUtils.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build/resources/main/plugin.yml" beforeDir="false" afterPath="$PROJECT_DIR$/build/resources/main/plugin.yml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tech/bedev/discordsrvutils/DiscordSRVUtils.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tech/bedev/discordsrvutils/DiscordSRVUtils.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tech/bedev/discordsrvutils/events/JDAEvents.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tech/bedev/discordsrvutils/events/JDAEvents.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/plugin.yml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/plugin.yml" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -66,12 +100,7 @@
                 <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                 <item name="DiscordSRVUtils" type="f1a62948:ProjectNode" />
                 <item name="Tasks" type="e4a08cd1:TasksNode" />
-                <item name="publishing" type="c8890929:TasksNode$1" />
-              </path>
-              <path>
-                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
-                <item name="DiscordSRVUtils" type="f1a62948:ProjectNode" />
-                <item name="Run Configurations" type="7b0102dc:RunConfigurationsNode" />
+                <item name="shadow" type="c8890929:TasksNode$1" />
               </path>
             </expand>
             <select />
@@ -107,7 +136,7 @@
   <component name="PropertiesComponent">
     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
     <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$/build.gradle" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$/../AquilaMC/VanillaRemover/VanillaRemover/build.gradle" />
     <property name="project.structure.last.edited" value="Project" />
     <property name="project.structure.proportion" value="0.15" />
     <property name="project.structure.side.proportion" value="0.35287356" />
@@ -352,7 +381,28 @@
       <option name="project" value="LOCAL" />
       <updated>1610330310730</updated>
     </task>
-    <option name="localTasksCounter" value="16" />
+    <task id="LOCAL-00016" summary="Code optimization">
+      <created>1610365004038</created>
+      <option name="number" value="00016" />
+      <option name="presentableId" value="LOCAL-00016" />
+      <option name="project" value="LOCAL" />
+      <updated>1610365004038</updated>
+    </task>
+    <task id="LOCAL-00017" summary="Code optimization">
+      <created>1610365061509</created>
+      <option name="number" value="00017" />
+      <option name="presentableId" value="LOCAL-00017" />
+      <option name="project" value="LOCAL" />
+      <updated>1610365061509</updated>
+    </task>
+    <task id="LOCAL-00018" summary="Fixed another bug">
+      <created>1610365401030</created>
+      <option name="number" value="00018" />
+      <option name="presentableId" value="LOCAL-00018" />
+      <option name="project" value="LOCAL" />
+      <updated>1610365401030</updated>
+    </task>
+    <option name="localTasksCounter" value="19" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -381,7 +431,9 @@
     <MESSAGE value="Done with sr command, done with clear memory command, and maybe i will release this to spigot" />
     <MESSAGE value="v1.1.8" />
     <MESSAGE value="v1.1.9" />
-    <option name="LAST_COMMIT_MESSAGE" value="v1.1.9" />
+    <MESSAGE value="Code optimization" />
+    <MESSAGE value="Fixed another bug" />
+    <option name="LAST_COMMIT_MESSAGE" value="Fixed another bug" />
   </component>
   <component name="WindowStateProjectService">
     <state x="488" y="67" key="#com.intellij.ide.util.MemberChooser" timestamp="1610290053724">
@@ -400,34 +452,34 @@
       <screen x="0" y="0" width="1366" height="728" />
     </state>
     <state x="92" y="92" width="1182" height="544" key="DiffContextDialog/0.0.1366.728@0.0.1366.728" timestamp="1610278211229" />
-    <state x="463" y="118" key="FileChooserDialogImpl" timestamp="1610328487252">
+    <state x="463" y="118" key="FileChooserDialogImpl" timestamp="1611002997246">
       <screen x="0" y="0" width="1366" height="728" />
     </state>
-    <state x="463" y="118" key="FileChooserDialogImpl/0.0.1366.728@0.0.1366.728" timestamp="1610328487252" />
-    <state width="1323" height="172" key="GridCell.Tab.0.bottom" timestamp="1610364510292">
+    <state x="463" y="118" key="FileChooserDialogImpl/0.0.1366.728@0.0.1366.728" timestamp="1611002997246" />
+    <state width="1323" height="172" key="GridCell.Tab.0.bottom" timestamp="1610901586208">
       <screen x="0" y="0" width="1366" height="728" />
     </state>
-    <state width="1323" height="172" key="GridCell.Tab.0.bottom/0.0.1366.728@0.0.1366.728" timestamp="1610364510292" />
-    <state width="1323" height="172" key="GridCell.Tab.0.center" timestamp="1610364510292">
+    <state width="1323" height="172" key="GridCell.Tab.0.bottom/0.0.1366.728@0.0.1366.728" timestamp="1610901586208" />
+    <state width="1323" height="172" key="GridCell.Tab.0.center" timestamp="1610901586208">
       <screen x="0" y="0" width="1366" height="728" />
     </state>
-    <state width="1323" height="172" key="GridCell.Tab.0.center/0.0.1366.728@0.0.1366.728" timestamp="1610364510292" />
-    <state width="1323" height="172" key="GridCell.Tab.0.left" timestamp="1610364510292">
+    <state width="1323" height="172" key="GridCell.Tab.0.center/0.0.1366.728@0.0.1366.728" timestamp="1610901586208" />
+    <state width="1323" height="172" key="GridCell.Tab.0.left" timestamp="1610901586208">
       <screen x="0" y="0" width="1366" height="728" />
     </state>
-    <state width="1323" height="172" key="GridCell.Tab.0.left/0.0.1366.728@0.0.1366.728" timestamp="1610364510292" />
-    <state width="1323" height="172" key="GridCell.Tab.0.right" timestamp="1610364510292">
+    <state width="1323" height="172" key="GridCell.Tab.0.left/0.0.1366.728@0.0.1366.728" timestamp="1610901586208" />
+    <state width="1323" height="172" key="GridCell.Tab.0.right" timestamp="1610901586208">
       <screen x="0" y="0" width="1366" height="728" />
     </state>
-    <state width="1323" height="172" key="GridCell.Tab.0.right/0.0.1366.728@0.0.1366.728" timestamp="1610364510292" />
+    <state width="1323" height="172" key="GridCell.Tab.0.right/0.0.1366.728@0.0.1366.728" timestamp="1610901586208" />
     <state x="184" y="0" key="SettingsEditor" timestamp="1610327145083">
       <screen x="0" y="0" width="1366" height="728" />
     </state>
     <state x="184" y="0" key="SettingsEditor/0.0.1366.728@0.0.1366.728" timestamp="1610327145083" />
-    <state x="275" y="92" key="Vcs.Push.Dialog.v2" timestamp="1610330318175">
+    <state x="275" y="92" key="Vcs.Push.Dialog.v2" timestamp="1610365440442">
       <screen x="0" y="0" width="1366" height="728" />
     </state>
-    <state x="275" y="92" key="Vcs.Push.Dialog.v2/0.0.1366.728@0.0.1366.728" timestamp="1610330318175" />
+    <state x="275" y="92" key="Vcs.Push.Dialog.v2/0.0.1366.728@0.0.1366.728" timestamp="1610365440442" />
     <state x="501" y="277" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2" timestamp="1610364646670">
       <screen x="0" y="0" width="1366" height="728" />
     </state>
@@ -436,10 +488,10 @@
       <screen x="0" y="0" width="1366" height="728" />
     </state>
     <state x="391" y="81" width="583" height="566" key="find.popup/0.0.1366.728@0.0.1366.728" timestamp="1608934484308" />
-    <state x="65" y="0" key="new project wizard" timestamp="1608934820969">
+    <state x="65" y="0" key="new project wizard" timestamp="1610642129670">
       <screen x="0" y="0" width="1366" height="728" />
     </state>
-    <state x="65" y="0" key="new project wizard/0.0.1366.728@0.0.1366.728" timestamp="1608934820969" />
+    <state x="65" y="0" key="new project wizard/0.0.1366.728@0.0.1366.728" timestamp="1610642129670" />
     <state x="339" y="162" width="672" height="677" key="run.anything.popup" timestamp="1610327751100">
       <screen x="0" y="0" width="1366" height="728" />
     </state>
