/*
 * LICENSE
 * DiscordSRVUtils
 * -------------
 * Copyright (C) 2020 - 2023 BlueTree242
 * -------------
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * END
 */
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id "net.kyori.blossom" version "1.3.0" apply false
}
compileJava.options.encoding 'UTF-8'
build.finalizedBy shadowJar
allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url = uri('https://repo.citizensnpcs.co')
        }
        maven {
            url = uri('https://nexus.scarsz.me/repository/maven-public/')
        }
        maven {
            url = uri('https://repo.extendedclip.com/content/repositories/placeholderapi/')
        }

        maven {
            url = uri('https://jitpack.io')
        }

        maven {
            url = uri('https://repo.codemc.org/repository/maven-public')
        }

        maven {
            url = uri('https://papermc.io/repo/repository/maven-public/')
        }

        maven {
            url = uri('https://nexus.scarsz.me/content/groups/public/')
        }

        maven {
            url = uri('https://hub.spigotmc.org/nexus/content/repositories/snapshots/')
        }

        maven {
            url = uri("https://papermc.io/repo/repository/maven-public/")
        }

        maven {
            name = "sonatype-oss-snapshots"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }

        maven {
            url = uri('https://repo.maven.apache.org/maven2/')
        }
        maven {
            name 'm2-dv8tion'
            url 'https://m2.dv8tion.net/releases'
        }
        maven { url "https://mvn-repo.arim.space/affero-gpl3" }
        maven { url "https://mvn-repo.arim.space/gpl3" }
        maven { url "https://mvn-repo.arim.space/lesser-gpl3" }
        maven { url "https://repo.dmulloy2.net/repository/public/" }
        maven { url "https://repo.essentialsx.net/releases/" }
    }
}

allprojects {
    apply plugin: 'java'
    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.22'
        annotationProcessor 'org.projectlombok:lombok:1.18.22'

        testCompileOnly 'org.projectlombok:lombok:1.18.22'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
    }
}
dependencies {
    implementation project(":bukkit")
}
def buildNumber = project.properties['buildNumber'] == null ? "NONE" : project.properties['buildNumber']
System.out.println("Build Number is " + buildNumber)
def commit = project.properties['commit'] == null ? "NONE" : project.properties['commit']
System.out.println("Commit Hash is " + commit)
subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    project.jar {
        archivesBaseName = 'DiscordSRVUtils-' + project.name
    }
    if (project.name == "core") {
        apply plugin: "net.kyori.blossom"
        blossom {
            def main = "src/main/java/dev/bluetree242/discordsrvutils/VersionInfo.java"
            replaceToken("@version@", version, main)
            replaceToken("@build@", buildNumber, main)
            replaceToken("@commit@", commit, main)
            replaceToken("@buildDate@", System.currentTimeMillis(), main)
        }
    } else if (project.name == "bukkit") {
        project.processResources {
            from(sourceSets.main.resources.srcDirs) {
                filter ReplaceTokens, tokens: [version: version]
            }
        }
    }
    tasks.withType(Copy).configureEach { duplicatesStrategy 'INCLUDE' }
}
shadowJar {
    classifier ''
}
publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

allprojects {
    java.sourceCompatibility = JavaVersion.VERSION_1_8
    java.targetCompatibility = JavaVersion.VERSION_1_8
}





